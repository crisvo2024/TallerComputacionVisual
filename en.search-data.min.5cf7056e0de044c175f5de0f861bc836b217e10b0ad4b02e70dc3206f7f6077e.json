[{"id":0,"href":"/showcase/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":1,"href":"/showcase/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"Blog","content":"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff #  Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":2,"href":"/showcase/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams:  CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34;  TwitterUser: \u0026#34;spf13\u0026#34;  SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":3,"href":"/showcase/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":"Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"},{"id":4,"href":"/showcase/docs/visual_computing/logs/","title":"Logs","section":"Visual Computing","content":"Registros actividades en clase #  Martes 29 de Marzo: #   Definición de la estructura de la página para la realización de los distintos ejercicios. Exploración de los distintos tipos de ilusiones encontradas en la página web de Michael Bach - Illutions Definición y desarrollo de una ilusión de tipo rejilla o grid.  Jueves 31 de Marzo: #   Exploración e investigación acerca de la convolución en el procesamiento de imágenes.  "},{"id":5,"href":"/showcase/docs/visual_computing/profiles/","title":"Profiles","section":"Visual Computing","content":"Perfiles #  Juan Esteban Rozo Urbina #   Estudiante de Ingeniería de Sistemas y Computación - Universidad Nacional de Colombia Software Developer - Mercado Libre Colombia. Estudiante de ingeniería de software comprometido y orientado a objetivos, amante de la tecnología, entusiasta del desarrollo de software para mejorar la vida de las personas, buscador de oportunidades para aprender y crecer personal y profesionalmente, inspirado por el deseo de mejorar y ayudar a resolver problemas a través de la ciencia y la tecnología.   Cristian Santiago Vargas O. #   Estudiante de Ingeniería de Sistemas y Computación - Universidad Nacional de Colombia Junior Full-stack Developerr - Fit Ideas. Soy un estudiante de Ingeniería de Software responsable y que aprende rápido, que busca crear y mejorar sistemas de software que ayuden a la mayoría de las personas en su vida diaria. Me gusta asumir retos y resolver problemas, así como ayudar a mis compañeros con los suyos. Mis objetivos en este momento son ganar experiencia y mejorar mis habilidades profesionales y personales para convertirme en un exitoso ingeniero de software.    "},{"id":6,"href":"/showcase/docs/visual_computing/template_examples/","title":"Template Examples","section":"Visual Computing","content":"Template Examples #    Buttons  Buttons # Buttons are styled links that can lead to local page or external link. Example # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute   Columns  Columns # Columns help organize shorter pieces of content horizontally for readability. {{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis!   Details  Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode. Example # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip;   Expand  Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it. Example # Default # {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Expand ↕ Markdown content # Lorem markdownum insigne\u0026hellip; With Custom Label # {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne.   Hints  Hints # Hint shortcode can be used as hint/alerts/notification block. There are 3 colors to choose: info, warning and danger. {{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content   Katex  KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX Example # {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here.   Mermaid  Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text. Override Mermaid Initialization Config To override the initialization config for Mermaid, create a mermaid.json file in your assets folder! Example # {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left.   P5  p5 # p5 helps add p5 sketches into your book. There are two types of p5 shortcodes according to the html element used to embed them. Types # Div p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div. p5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.1\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*.   Tabs  Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform. {{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content. Lorem markdownum insigne. Olympo signis Delphis!   "},{"id":7,"href":"/showcase/docs/visual_computing/template_examples/buttons/","title":"Buttons","section":"Template Examples","content":"Buttons #  Buttons are styled links that can lead to local page or external link.\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "},{"id":8,"href":"/showcase/docs/visual_computing/template_examples/columns/","title":"Columns","section":"Template Examples","content":"Columns #  Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne...  \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt;  # Mid Content Lorem markdownum insigne...  \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt;  # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "},{"id":9,"href":"/showcase/docs/visual_computing/template_examples/details/","title":"Details","section":"Template Examples","content":"Details #  Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample #  {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content #  Lorem markdownum insigne\u0026hellip;   "},{"id":10,"href":"/showcase/docs/visual_computing/template_examples/expand/","title":"Expand","section":"Template Examples","content":"Expand #  Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample #  Default #  {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Expand ↕  Markdown content #  Lorem markdownum insigne\u0026hellip;    With Custom Label #  {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Custom Label ...  Markdown content #  Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    "},{"id":11,"href":"/showcase/docs/visual_computing/template_examples/hints/","title":"Hints","section":"Template Examples","content":"Hints #  Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "},{"id":12,"href":"/showcase/docs/visual_computing/template_examples/katex/","title":"Katex","section":"Template Examples","content":"KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample #  {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}}     \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]    Display Mode Example #  Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"},{"id":13,"href":"/showcase/docs/visual_computing/template_examples/mermaid/","title":"Mermaid","section":"Template Examples","content":"Mermaid Chart #  MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\n Example #  {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2  State1: The state with a note  note right of State1  Important information! You can write  notes.  end note  State1 --\u0026gt; State2  note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}}    mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 -- State2 note left of State2 : This is the note to the left.   "},{"id":14,"href":"/showcase/docs/visual_computing/template_examples/p5/","title":"P5","section":"Template Examples","content":"p5 #  p5 helps add p5 sketches into your book. There are two types of p5 shortcodes according to the html element used to embed them.\nTypes #    Div  p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div. p5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.1\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified. Scintillating grid # Look at this and also this among many more references there are. p5-div markdown {{\u0026lt; p5-div sketch=\u0026#34;/showcase/sketches/scintillating.   Iframe  p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe. p5-iframe # {{\u0026lt; p5-iframe ver=\u0026#34;1.4.1\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified. Color relativity # Look at this brief explanation about what color relativity is. p5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/showcase/sketches/colors.   "},{"id":15,"href":"/showcase/docs/visual_computing/template_examples/p5/div/","title":"Div","section":"P5","content":"p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.\np5-div #  {{\u0026lt; p5-div ver=\u0026#34;1.4.1\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nScintillating grid #  Look at this and also this among many more references there are.\np5-div markdown {{\u0026lt; p5-div sketch=\u0026#34;/showcase/sketches/scintillating.js\u0026#34; \u0026gt;}}          p5-instance-div #  {{\u0026lt; p5-instance-div id=\u0026#34;sketchid\u0026#34; ver=\u0026#34;1.4.1\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}}  // inline sketch code {{\u0026lt; /p5-instance-div \u0026gt;}} Note that the inline sketch should be coded in p5 instance mode syntax.  All parameters are optional but id. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nLilac chaser #  Look at this introductory reference.\np5-instance-div markdown {{\u0026lt; p5-instance-div id=\u0026#34;lilac-chaser\u0026#34; \u0026gt;}}  // Adapted from [this](https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/lilacChaser.js)  let jump = 0;  let count = 0;   p5.setup = function() {  p5.createCanvas(400, 400);  p5.frameRate(7);  };   function drawBlurCircles(x, y, r) {  p5.push();  p5.noStroke();  var opc = 0.4;  var step = 3.0/r;   for (var i = r; i \u0026gt; 0; i-=1.5) {  if (opc \u0026lt; 5) {  opc += step;  p5.fill(255, 20, 180, opc);  }  p5.ellipse(x, y, i, i);  }  p5.pop();  };   p5.draw = function() {  p5.background(200);  var numCircles = 12;  var stepAngle = 360.0/numCircles;  p5.push();  p5.translate(p5.width/2.0, p5.height/2.0);  for (var i = 0; i \u0026lt; 360; i = i + stepAngle) {  if (i != jump) {  p5.push();  p5.rotate(p5.radians(i));  drawBlurCircles(120, 0, 60);  p5.pop();  }  }  if( !p5.mouseIsPressed ) {  jump = (jump + stepAngle)%360;  }  p5.push();  p5.strokeWeight(1.5);  p5.line(-7, 0, 7, 0);  p5.line(0, -7, 0, 7);  p5.pop();  p5.pop();  } {{\u0026lt; /p5-instance-div \u0026gt;}} Note that p5 should be the name to be used for the sketch object variable.        new p5((p5) = { let jump = 0; let count = 0; p5.setup = function() { p5.createCanvas(380, 380); p5.frameRate(7); }; function drawBlurCircles(x, y, r) { p5.push(); p5.noStroke(); var opc = 0.4; var step = 3.0/r; for (var i = r; i  0; i-=1.5) { if (opc Video on canvas #  Adapted from here. Don\u0026rsquo;t forget to checkout also the video on dom example.\np5-instance-div markdown {{\u0026lt; p5-instance-div id=\u0026#34;video\u0026#34; \u0026gt;}}  let fingers;   p5.setup = function() {  p5.createCanvas(710, 400);  // specify multiple formats for different browsers  fingers = p5.createVideo([\u0026#39;/showcase/sketches/fingers.mov\u0026#39;, \u0026#39;/showcase/sketches/fingers.webm\u0026#39;]);  fingers.hide(); // by default video shows up in separate dom  // element. hide it and draw it to the canvas instead  };   p5.draw = function() {  p5.background(150);  p5.image(fingers, 10, 10); // draw the video frame to canvas  p5.filter(p5.GRAY);  p5.image(fingers, 150, 150); // draw a second copy to canvas  };   p5.mousePressed = function() {  fingers.loop(); // set the video to loop and start playing  } {{\u0026lt; /p5-instance-div \u0026gt;}} Note that p5 should be the name to be used for the sketch object variable.        new p5((p5) = { let fingers; p5.setup = function() { p5.createCanvas(710, 400); // specify multiple formats for different browsers fingers = p5.createVideo(['/showcase/sketches/fingers.mov', '/showcase/sketches/fingers.webm']); fingers.hide(); // by default video shows up in separate dom // element. hide it and draw it to the canvas instead }; p5.draw = function() { p5.background(150); p5.image(fingers, 10, 10); // draw the video frame to canvas p5.filter(p5.GRAY); p5.image(fingers, 150, 150); // draw a second copy to canvas }; p5.mousePressed = function() { fingers.loop(); // set the video to loop and start playing } }, \"video\" );  "},{"id":16,"href":"/showcase/docs/visual_computing/template_examples/p5/iframe/","title":"Iframe","section":"P5","content":"p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe.\np5-iframe #  {{\u0026lt; p5-iframe ver=\u0026#34;1.4.1\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nColor relativity #  Look at this brief explanation about what color relativity is.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/showcase/sketches/colors.js\u0026#34; width=\u0026#34;725\u0026#34; height=\u0026#34;425 \u0026gt;}}             \"  Third party libraries #  Example adapted from p5.EasyCam.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/showcase/sketches/quick_easycam.js\u0026#34; lib1=\u0026#34;https://cdn.jsdelivr.net/gh/freshfork/p5.EasyCam@1.2.1/p5.easycam.min.js\u0026#34; width=\u0026#34;525\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}}              \"  Sound #  Example took from the p5 examples.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/showcase/sketches/sound.js\u0026#34; width=\u0026#34;225\u0026#34; height=\u0026#34;225\u0026#34; \u0026gt;}}             \"  p5-global-iframe #  {{\u0026lt; p5-global-iframe id=\u0026#34;sketchid\u0026#34; ver=\u0026#34;1.4.1\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}}  // inline sketch code {{\u0026lt; /p5-global-iframe \u0026gt;}} Note that the inline sketch should be coded in p5 global mode syntax.  All parameters are optional but id. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nBreathing square #  Look at this reference for an explanation and further parameterization of the illusion.\np5-global-iframe markdown {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;625\u0026#34; height=\u0026#34;625\u0026#34; \u0026gt;}}  // Coded as `global mode` of [this](https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/rotateSquare.js)  let angle = 0;  let speed = 0.06;   function setup() {  createCanvas(600, 600);  }   function draw() {  background(255, 255, 255);  rotateSquare();  if (!mouseIsPressed) {  strokeWeight(0);  stroke(0);  fill(255, 140, 0);  rect(0, 0, 281, 281);  rect(318, 0, 281, 281);  rect(0, 318, 281, 281);  rect(318, 318, 281, 281);  }  }   function rotateSquare() {  push();  angle += speed;  strokeWeight(0);  stroke(0);  fill(0, 0, 255);  translate(width / 2, height / 2);  rotate(angle);  rect(-187.5, -187.5, 375, 375);  pop();  } {{\u0026lt; /p5-global-iframe \u0026gt;}}         let angle = 0; let speed = 0.06; function setup() { createCanvas(600, 600); } function draw() { background(255, 255, 255); rotateSquare(); if (!mouseIsPressed) { strokeWeight(0); stroke(0); fill(255, 140, 0); rect(0, 0, 281, 281); rect(318, 0, 281, 281); rect(0, 318, 281, 281); rect(318, 318, 281, 281); } } function rotateSquare() { push(); angle \u0026#43;= speed; strokeWeight(0); stroke(0); fill(0, 0, 255); translate(width / 2, height / 2); rotate(angle); rect(-187.5, -187.5, 375, 375); pop(); }      \"  p5-widget #  The p5-widget shortcode embed p5.js code within an p5-widget.\n{{\u0026lt; p5-widget autoplay=true height=\u0026#34;400\u0026#34; width=\u0026#34;400\u0026#34; ver=\u0026#34;1.4.1\u0026#34; \u0026gt;}}  // inline sketch code {{\u0026lt; /p5-widget \u0026gt;}} All parameters are optional. Default ver is 1.4.1. For example:\nWidget example #  {{\u0026lt; p5-widget autoplay=true height=\u0026#34;400\u0026#34; width=\u0026#34;400\u0026#34; ver=\u0026#34;1.4.1\u0026#34; \u0026gt;}} function setup() {  createCanvas(300, 300); }  function draw() {  background(255, 0, 255); } {{\u0026lt; /p5-widget \u0026gt;}}   function setup() { createCanvas(300, 300); } function draw() { background(255, 0, 255); }  "},{"id":17,"href":"/showcase/docs/visual_computing/template_examples/tabs/","title":"Tabs","section":"Template Examples","content":"Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS #  This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux #  This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows #  This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "},{"id":18,"href":"/showcase/docs/visual_computing/workshops/","title":"Workshops","section":"Visual Computing","content":"Workshops #    Anti Aliasing  Taller Rasterización # En este taller se estudió la técnica denominada anti-aliasing con la cual se busca disminuir la distorción en imágenes de alta resolución al ser presentadas en una resolución inferior. Anti-aliasing (AA) # 1. Introducción # Un problema básico al realizar renderización es que si amplía la imagen del triángulo que se ha renderizado entonces se evidencia que los bordes del triángulo no son regulares, es decir, se puede observar pequeños \u0026ldquo;escalones\u0026rdquo; a lo largo del triángulo como se muestra en la siguiente figura.   Illutions  Taller Ilusiónes # En este taller se exploraron dos lineas diferentes de ilusi[ones de computación visual, que aunque parecen diferentes inicialmente, ambas terminan siendo fundamentos que en conjunto dan forma al prosesamiento de imagenes en inteligencia artificial. Grid illutions # 1. Introducción # Las ilusiones de cuadrículas hacen referencia a cualquier tipo de cuadrícula que engaña la visión de una persona. Las dos ilusiones más conocidas son:   Image Processing  Taller Procesamiento de Imágenes # En este taller se estudiaron distintas temáticas como lo son las máscaras de convolución (ya estudiadas en talleres anteriores), herramientas para el ampliamiento de imágenes y herramientas de luminosidad del color (utilizando distintos modelos de color), mediante el uso de shaders. Procesamiento de imágenes # 1. Introducción # El masking o la aplicación de máscaras de convolución juega un papel muy importante dentro del campo del procesamiento de imágenes ya que a través ellas es posible aplicar diferentes efectos como lo son desenfoque (blur), nitidez (sharpening), relieve (embossing), detección de bordes (edge detection), entre otros.   Main Spaces  Taller Main Spaces # 1. Introducción # En este taller se exploraron las posibilidades de las transformaciones espaciales para la producción de piezas en 3D, especialmente se hace uso de estas transformaciónes al proyectar los resultados de la pieza 3D en la pantalla, así como a partir de movimientos y gestos realizados sobre la pantalla modificar la pieza 3D al agregar objetos en su mundo, esto sin contar con las transformaciónes intermedias para lograr algunos efectos en la pantalla como la iluminación.   Procedural Texturing  Procedural texturing # En este taller se estudió la técnica denominada procedurtal texturing con la cual se busca generar programáticamente texturas en el shader para mapearlas a figuras 1. Introducción # Para este taller quisimos explorar las diferentes posibilidades que tenía el procedural texturing. Esta técnica para generar texturas en el shader es muy útil dado que es muy eficiente al aprovechar las capacidades de las GPU y permite una mayor flexibilidad al momento de generar escenarios en 3D.   "},{"id":19,"href":"/showcase/docs/visual_computing/workshops/anti_aliasing/","title":"Anti Aliasing","section":"Workshops","content":"Taller Rasterización #  En este taller se estudió la técnica denominada anti-aliasing con la cual se busca disminuir la distorción en imágenes de alta resolución al ser presentadas en una resolución inferior.\nAnti-aliasing (AA) #  1. Introducción #  Un problema básico al realizar renderización es que si amplía la imagen del triángulo que se ha renderizado entonces se evidencia que los bordes del triángulo no son regulares, es decir, se puede observar pequeños \u0026ldquo;escalones\u0026rdquo; a lo largo del triángulo como se muestra en la siguiente figura.\nA estos escalones que se mencionan se les conoce usualmente con la palabra jaggies. Estos bordes dentados son básicamente el resultado del hecho de que el triángulo se descompone en píxeles ya que con el proceso de rasterización lo que se hace es descomponer una superficie continua como lo es el triángulo en elementos discretos que vienen siendo los píxeles. La solución propuesta para este problema se denomina anti-aliasing (también denotado AA) que consiste en dividir el píxel en subpíxeles y aplicar la prueba a cada subpíxel para ver si este se esncuentra o no dentro del triángulo. Aunque cada subpíxel no viene siendo más que otro escalón este proceso permite capturar los bordes con más precisión.\n2. Revisión bibliográfica #  Retomando la idea propuesta en la sección anterior en la cual se cogían submuestras de cada píxel lo que se hace entonces para \u0026ldquo;suavizar\u0026rdquo; estos bordes es determinar el color final del píxel como la suma del color de todos los subpíxeles dividida por el número total de subpíxeles. A modo de ejemplificar este proceso consideremos un triángulo de color negro con fondo blanco y dividimos cada píxel del triángulo rasterizado en 8 subpíxeles. Al aplicar el anti-aliasing sobre un determinado píxel vemos que solo 5 de sus 8 subpíxeles se encuentrán dentro del triángulo entonces el color final (en RGB) del píxel quedaría:\n  \\[\\frac{255 \u0026#43; 255 \u0026#43; 255 \u0026#43; 0 \u0026#43; 0 \u0026#43; 0 \u0026#43; 0 \u0026#43; 0}{8} = \\frac{765}{8} = 95.625\\]  Este color corresponde a un gris oscuro. De esta manera se deja a un lado una transición \u0026ldquo;binaria\u0026rdquo; entre el borde del triángulo y el fondo para producir una transición más gradual con el fin de disminuir visualmente el efecto de los bordes escalonados.\nCon el propósito de dar un fundamento teórico general del proceso de rasterización y anti-alising se hará una breve explicación de las coordenadas baricéntricas:\n2.1 Coordenadas baricéntricas #  Un triángulo es un polígono con 3 vértices v0, v1, v2 y 3 aristas v0v1, v1v2, v2v0. Un triángulo degenerado es aquel en el que los tres vértices son colineales, es decir, todos caen sobre la misma línea (o incluso pueden ser todos el mismo punto). En 2D un triángulo divide el plano en dos regiones: la interior, que es finita, y la exterior, que no lo es. Ambas están separadas por el límite de los triángulos, que consiste en las tres aristas. Para rasterizar un triángulo, básicamente sólo tenemos que consultar un montón de puntos, que suelen corresponder directamente a la cuadrícula de píxeles o estar dispuestos en algún otro patrón regular, y averiguar si están dentro o no. Además de lo anterior se tiene también que los triángulos son siempre convexos: para dos puntos cualesquiera dentro del triángulo, la línea que los une está también totalmente dentro del triángulo.\nConsideranto la arista v0v1 de la imagen anterior vemos que esta línea divide el plano en dos mitades: un lado \u0026ldquo;izquierdo\u0026rdquo; y un lado \u0026ldquo;derecho\u0026rdquo;. No obstante, si el borde resulta ser horizontal entonces ¿cuál de las dos mitades es la \u0026ldquo;izquierda\u0026rdquo; si están apiladas verticalmente?. Por ello se hace necesario expresarlo todo en relación con la arista y no con la imagen de tal manera que e recorre el triángulo por la arista desde v0 hacia v1. Con esto, se refiere a todo lo que está a la izquierda (mirando hacia v1) como el semiespacio \u0026ldquo;positivo\u0026rdquo;, y a todo lo que está a la derecha como el semiespacio \u0026ldquo;negativo\u0026rdquo;. Por último, los puntos que caen sobre la línea no pertenecen a ninguno de los dos semiespacios.\nAhora bien, se introduce el concepto del determinante de una matriz dados 3 puntos como:\n \\[Orient2D(a, b, c) = \\begin{vmatrix} a_{x} \u0026amp; b_{x} \u0026amp; c_{x}\\\\ a_{y} \u0026amp; b_{y} \u0026amp; c_{y}\\\\ 1 \u0026amp; 1 \u0026amp; 1 \\end{vmatrix} = \\begin{vmatrix} b_{x} - a_{x} \u0026amp; c_{x} - a_{x} \\\\ b_{y} - a_{y} \u0026amp; c_{y} - a_{y} \\end{vmatrix}\\]  De esta manera, si esta expresión es positiva, c se encuentra a la izquierda de la arista dirigida ab (es decir, el triángulo abc se enrolla en sentido contrario a las agujas del reloj). Así que, al calcular Orient2D(v0, v1, v2) esto debería indicar si el triángulo está enrollado en sentido contrario a las agujas del reloj (es decir, si v2 está a la izquierda de la arista orientada v0v1) o no. La expresión anterior nos dice que debemos calcular el siguiente determinante:\n \\[Orient2D(v_{0}, v_{1}, v_{2}) = \\begin{vmatrix} v_{1x} - v_{0x} \u0026amp; v_{2x} - v_{0x} \\\\ v_{1y} - v_{0y} \u0026amp; v_{2y} - v_{0y} \\end{vmatrix}\\]  Y esto debería ser igual al área con signo del paralelogramo con aristas v0v1 y v0v2 como se muestra a continuación:\nAhora bien, si observamos la imagen tenemos que el paralelogramo tiene el doble de área que el triángulo lo cual nos da la fórmula estándar del determinante para el área del triángulo:\n \\[TriArea(v_{0}, v_{1}, v_{2}) = \\frac{1}{2} \\begin{vmatrix} v_{1x} - v_{0x} \u0026amp; v_{2x} - v_{0x} \\\\ v_{1y} - v_{0y} \u0026amp; v_{2y} - v_{0y} \\end{vmatrix}\\]  Ahora, para averiguar en qué lado de una arista se encuentra un punto vamos a elegir un punto arbitrario p y ver cómo se relaciona con la arista v0v1 de tal manera que la expresión del determinante quedaría:\n \\[\\begin{vmatrix} v_{1x} - v_{0x} \u0026amp; p_{x} - v_{0x} \\\\ v_{1y} - v_{0y} \u0026amp; p_{y} - v_{0y} \\end{vmatrix} = (v_{1x} - v_{0x})(p_{y} - v_{0y}) - (v_{1y} - v_{0y})(p_{x} - v_{0x})\\]  Y reordenando términos tenemos:\n \\[F_{01}(p) = (v_{0y} - v_{1y})p_{x} \u0026#43; (v_{1x} - v_{0x})p_{y} \u0026#43; (v_{0x}v_{1y} - v_{0y}v_{1x})\\\\ F_{12}(p) = (v_{1y} - v_{2y})p_{x} \u0026#43; (v_{2x} - v_{1x})p_{y} \u0026#43; (v_{1x}v_{2y} - v_{1y}v_{2x})\\\\ F_{20}(p) = (v_{2y} - v_{0y})p_{x} \u0026#43; (v_{0x} - v_{2x})p_{y} \u0026#43; (v_{2x}v_{0y} - v_{2y}v_{0x})\\]  A estas funciones se les denomina función de borde (o edge function en inglés) para los borded v0v1, v1v2 y v2v0 respectivamente, y de esta manera si las tres son positivas, p está dentro del triángulo, suponiendo que el triángulo está enrollado en sentido contrario a las agujas del reloj.\nY es este hecho con el cual se trabaja para realizar la rasterización de una imagen y por consiguiente también se usa para el proceso de anti-aliasing.\n3. Métodos #  Para llevar a cabo este ejercicio se llevó a cabo en primer lugar una revisión teórica de cada uno de los conceptos que envuelven la temática del proceso de anti-aliasing (AA) en la rasterización de imágenes. De esta manera se investigaron distintas fuentes de información debidamente citadas de las cuales se extrajeron ideas generales acerca de conceptos clave como la fundamentación teórica de las coordenas baricéntricas y el proceso de anti-aliasing aplicado en imágenes.\nFinalmente se desarrolló un programa a partir de un ejemplo de rasterización de un triángulo desarrollado por el profesor Jean Pierre Charalambos Hernandez (vease los recursos citados para ver el ejemplo original) de tal manera que fue modificado y adaptado para poder aplicar anti-aliasing sobre un triángulo ya rasterizado.\n4. Resultados #  A partir del estudio llevado a cabo se realizó el siguiente programa con el fin de visualizar el efecto del anti-aliasing sobre un triángulo rasterizado.\np5 - anti-aliasing code {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;625\u0026#34; height=\u0026#34;625\u0026#34; \u0026gt;}}  const ROWS = 100;  const COLS = 100;  const LENGTH = 5;  let quadrille;  let row0, col0, row1, col1, row2, col2;  let original_quadrille;   function setup() {  createCanvas(COLS * LENGTH, ROWS * LENGTH);  quadrille = createQuadrille(200, 200);  quadrille.colorize(\u0026#39;red\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;cyan\u0026#39;);  }   function draw() {  background(\u0026#39;#f7f5f5\u0026#39;);  drawQuadrille(quadrille, { cellLength: LENGTH, outline: \u0026#39;black\u0026#39;, board: true });  }   function keyPressed() {  if (key === \u0026#39;r\u0026#39;) { // Rasterize the triangle  randomize();  quadrille.clear();  quadrille.rasterizeTriangle(row0, col0, row1, col1, row2, col2, colorize_shader, [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]);  original_quadrille = quadrille.memory2D;  }   if (key === \u0026#39;a\u0026#39;) { // Apply anti-aliasing  applyAA();  }   if (key === \u0026#39;s\u0026#39;) { // Remove anti-aliasing  quadrille.memory2D = original_quadrille;  }   }   function colorize_shader({ pattern: mixin }) {  let rgb = mixin.slice(0, 3);  return color(rgb);  }   function randomize() {  col0 = int(random(0, COLS));  row0 = int(random(0, ROWS));  col1 = int(random(0, COLS));  row1 = int(random(0, ROWS));  col2 = int(random(0, COLS));  row2 = int(random(0, ROWS));  }   function applyAA() {  grid = quadrille.memory2D;   for (let i = 0; i \u0026lt; ROWS; i++) {  for (let j = 0; j \u0026lt; COLS; j++) {  if (grid[i][j] != 0) {  sum = 0;  for (let k = i-1; k \u0026lt; i + 1; k += 0.0625){  for (let t = j-1; t \u0026lt; j + 1; t += 0.0625){ // Pixel division: 1024 subpixels  let coords = barycentric_coords(k, t, row0, col0, row1, col1, row2, col2);  if (!(coords.w0 \u0026gt;= 0 \u0026amp;\u0026amp; coords.w1 \u0026gt;= 0 \u0026amp;\u0026amp; coords.w2 \u0026gt;= 0)) {  sum += 1;  }  }  }  grid[i][j] = color((sum * 255)/256);  }  }  }   quadrille.memory2D = grid;  }   function barycentric_coords(row, col, row0, col0, row1, col1, row2, col2) {  let edges = edge_functions(row, col, row0, col0, row1, col1, row2, col2);  let area = parallelogram_area(row0, col0, row1, col1, row2, col2);  return { w0: edges.e12 / area, w1: edges.e20 / area, w2: edges.e01 / area };  }   function parallelogram_area(row0, col0, row1, col1, row2, col2) {  return (col1 - col0) * (row2 - row0) - (col2 - col0) * (row1 - row0);  }   function edge_functions(row, col, row0, col0, row1, col1, row2, col2) {  let e01 = (row0 - row1) * col + (col1 - col0) * row + (col0 * row1 - row0 * col1);  let e12 = (row1 - row2) * col + (col2 - col1) * row + (col1 * row2 - row1 * col2);  let e20 = (row2 - row0) * col + (col0 - col2) * row + (col2 * row0 - row2 * col0);  return { e01, e12, e20 };  } {{\u0026lt; /p5-global-iframe \u0026gt;}}          const ROWS = 100; const COLS = 100; const LENGTH = 5; let quadrille; let row0, col0, row1, col1, row2, col2; let original_quadrille; function setup() { createCanvas(COLS * LENGTH, ROWS * LENGTH); quadrille = createQuadrille(200, 200); quadrille.colorize(\u0026#39;red\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;cyan\u0026#39;); } function draw() { background(\u0026#39;#f7f5f5\u0026#39;); drawQuadrille(quadrille, { cellLength: LENGTH, outline: \u0026#39;black\u0026#39;, board: true }); } function keyPressed() { if (key === \u0026#39;r\u0026#39;) { // Rasterize the triangle randomize(); quadrille.clear(); quadrille.rasterizeTriangle(row0, col0, row1, col1, row2, col2, colorize_shader, [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]); original_quadrille = quadrille.memory2D; } if (key === \u0026#39;a\u0026#39;) { // Apply anti-aliasing applyAA(); } if (key === \u0026#39;s\u0026#39;) { // Remove anti-aliasing quadrille.memory2D = original_quadrille; } } function colorize_shader({ pattern: mixin }) { let rgb = mixin.slice(0, 3); return color(rgb); } function randomize() { col0 = int(random(0, COLS)); row0 = int(random(0, ROWS)); col1 = int(random(0, COLS)); row1 = int(random(0, ROWS)); col2 = int(random(0, COLS)); row2 = int(random(0, ROWS)); } function applyAA() { grid = quadrille.memory2D; for (let i = 0; i \u0026lt; ROWS; i\u0026#43;\u0026#43;) { for (let j = 0; j \u0026lt; COLS; j\u0026#43;\u0026#43;) { if (grid[i][j] != 0) { sum = 0; for (let k = i-1; k \u0026lt; i \u0026#43; 1; k \u0026#43;= 0.0625){ for (let t = j-1; t \u0026lt; j \u0026#43; 1; t \u0026#43;= 0.0625){ // Pixel division: 1024 subpixels let coords = barycentric_coords(k, t, row0, col0, row1, col1, row2, col2); if (!(coords.w0 \u0026gt;= 0 \u0026amp;\u0026amp; coords.w1 \u0026gt;= 0 \u0026amp;\u0026amp; coords.w2 \u0026gt;= 0)) { sum \u0026#43;= 1; } } } grid[i][j] = color((sum * 255)/256); } } } quadrille.memory2D = grid; } function barycentric_coords(row, col, row0, col0, row1, col1, row2, col2) { let edges = edge_functions(row, col, row0, col0, row1, col1, row2, col2); let area = parallelogram_area(row0, col0, row1, col1, row2, col2); return { w0: edges.e12 / area, w1: edges.e20 / area, w2: edges.e01 / area }; } function parallelogram_area(row0, col0, row1, col1, row2, col2) { return (col1 - col0) * (row2 - row0) - (col2 - col0) * (row1 - row0); } function edge_functions(row, col, row0, col0, row1, col1, row2, col2) { let e01 = (row0 - row1) * col \u0026#43; (col1 - col0) * row \u0026#43; (col0 * row1 - row0 * col1); let e12 = (row1 - row2) * col \u0026#43; (col2 - col1) * row \u0026#43; (col1 * row2 - row1 * col2); let e20 = (row2 - row0) * col \u0026#43; (col0 - col2) * row \u0026#43; (col2 * row0 - row2 * col0); return { e01, e12, e20 }; }      \"  5. Discusión #  Partiendo de los resultados obtenidos tenemos que se puede evidenciar un suavizado en los bordes de cada triángulo generado dependiendo de qué fracción de los píxeles de los bordes estén por dentro y qué fracción estén por fuera. Por otra parte, y partiendo del hecho de que se realizó una subdivisión de cada píxel en 256 subpíxeles se evidencia que el proceso de rasterización que se lleva a cabo para determinar el promedio del color del píxel se hace de manera rápida debido a que el cálculo de las funciones de borde para cada subpíxel no significa una carga computacional grande.\n6. Conclusión #   El anti-aliasing es un proceso de mucha utilidad y aplicabilidad por ejemplo en el contexto de los videojuegos ya que provee de un algorítmo eficiente con el cual dar un efecto de suavizado de las figuras y de esta manera el usuario puede tener una visualización de los gráficos mucho más agradable.    7. Referencias #   Rasterization: a Practical Implementation The barycentric conspiracy Spatial anti-aliasing Aliasing \u0026amp; Anti-aliasing Raster in p5.quadrille.js  "},{"id":20,"href":"/showcase/docs/visual_computing/workshops/illutions/","title":"Illutions","section":"Workshops","content":"Taller Ilusiónes #  En este taller se exploraron dos lineas diferentes de ilusi[ones de computación visual, que aunque parecen diferentes inicialmente, ambas terminan siendo fundamentos que en conjunto dan forma al prosesamiento de imagenes en inteligencia artificial.\nGrid illutions #  1. Introducción #  Las ilusiones de cuadrículas hacen referencia a cualquier tipo de cuadrícula que engaña la visión de una persona. Las dos ilusiones más conocidas son:\nLa ilusión de la cuadrícula de Hermann #        La ilusión de la cuadrícula centelleante #        A partir de lo visto en estas ilusiones, nace la idea de explorar las posibilidades de estos tipos de ilusiones, así como los fundamentos de porqué logran engañar nuestra visión.Iniciaremos realizando una exploración bibliográfica, para después describir el método utilizado para experimentar con variaciones de las ilusiones de cuadrícula y finalmente mostrar y analizar los resultados obtenidos, junto con las conclusiones obtenidas a partir de ellos.\n2. Revisión bibliográfica #  La principal explicación que se ha intentado dar para estos efectos visuales está basada en la Inhibición lateral y la Ley del contraste simultáneo de los colores, conceptos interrelacionados que explicaremos a continuación.\nInhibición lateral #  En neurobiología, la inhibición lateral es la capacidad de una neurona excitada de reducir la actividad de sus vecinas. En este proceso las señales nerviosas a las neuronas vecinas (situadas lateralmente a las neuronas excitadas) disminuyen. La inhibición lateral permite al cerebro gestionar la información ambiental y evitar la sobrecarga de información. Al amortiguar la acción de algunos estímulos sensoriales y mejorar la acción de otros, la inhibición lateral ayuda a agudizar nuestra percepción sensorial de la vista, el oído, el tacto y el olfato.\nEste fenomeno mejora la percepción de los bordes y aumenta el contraste en las imagenes visuales es por esto que la inhibición lateral ha sido incorporada a sistemas de sensores artificiales como chips de visión, sistemas auditivos y ratones opticos.\nEn la inhibición lateral, algunas neuronas se estimulan en mayor grado que otras. Una neurona altamente estimulada (neurona principal) libera neurotransmisores excitadores a las neuronas a lo largo de un camino particular. Al mismo tiempo, la neurona principal altamente estimulada activa interneuronas en el cerebro que inhiben la excitación de las células ubicadas lateralmente. Las interneuronas son células nerviosas que facilitan la comunicación entre el sistema nervioso central y las neuronas motoras o sensoriales. Esta actividad crea un mayor contraste entre varios estímulos y da como resultado un mayor enfoque en un estímulo vívido. La inhibición lateral se produce en los sistemas sensoriales del cuerpo, incluidos los sistemas olfativo , visual, táctil y auditivo.\nEl efecto de ésta inhibición lateral fue descubierto por Ernst Mach, que explicó en 1865 la ilusión visual denominada bandas de March. Este efecto produce que paneles que generan diferentes sombras colocados uno al lado del otro aparezcan más claros o más oscuros en las transiciones, a pesar del color uniforme dentro de un panel. Los paneles aparecen más claros en el borde con un panel más oscuro, y más oscuros en el borde con un panel más claro. Las bandas más oscuras y más claras en las transiciones no son reales, sino el resultado de la inhibición lateral. Las neuronas de la retina que reciben una mayor estimulación inhiben a las neuronas adyacentes en mayor grado que las células que reciben una estimulación menos intensa. Los receptores de luz que reciben información del lado más claro de los bordes producen una respuesta visual más fuerte que los receptores que reciben información del lado más oscuro. Esta respuesta del sistema nervisoso mejora el contraste en los bordes, haciendo que sean más pronunciados.\nLey del contraste simultáneo de los colores #  La ley del contraste simultáneo de los colores (en francés, loi du contraste simultané des couleurs) es una característica de la percepción humana del color establecida en 1839 por el químico francés Michel-Eugène Chevreul:\nEl tono de dos piezas de color parece más diferente cuando se observan yuxtapuestos que cuando se observan separadamente, sobre un fondo neutro común.  Una demostración de este fenomeno en el ambito de la luminosidad es la siguiente imagen:\n      Los dos cuadrados, uno encima del otro, en la zona de la derecha tienen la misma luminancia, y aparecen tan claros uno y otro, ya que se ven sobre el mismo fondo claro. El pequeño cuadrado oscuro adyacente en la parte inferior derecha parece casi tan oscuro como la gran pieza de la izquierda, pero tiene la misma luminancia que el pequeño cuadrado del centro del gran cuadrado de la izquierda, que parece mucho más claro, ya que está en un fondo sombreado.\nEn el ambito del tono En contacto con una pieza de color de diferente tonalidad, pero de luminosidad tan igual como sea posible, un color cambia de tono para distanciarse de aquel del que está yuxtapuesto.\n      Ejemplo con rojo y naranja: si, manteniendo como referencia los dos colores aislados sobre un fondo neutro, se yuxtapone un rojo y un naranja, el rojo de la pieza en contacto tira hacia el púrpura, mientras que el naranja tira al amarillo. Sólo hay dos colores sobre el fondo gris.\n3. Métodos #  Para llevar a cabo este ejercicio académico se llevó a cabo en primer lugar una experimentación con diferentes colores y patrones para tratar de generar diferentes ilusiones que se pueden construir a partir de cuadrículas. Posteriormente se realizó la revisión teórica de porque estos efectos visuales se producen.\n4. Resultados #  A partir de la experimentación se llego a estos efectos:\n                  5. Discusión #  Es interesante como al tomar la ilusión de la cuadrícula centelleante, y cambiar los colores de los puntos, se pudo generar otro efecto visual diferente en el que las lineas grices que conectan los puntos parecen cambiar de color de izquierda a derecha, como si se fuera cambiando lentamente el color de las lineas a violeta. Pero en realidad el cambio de color se hace en los puntos que se encuentran en las intercepciones de la cuadrícula, los cuales comienzan en blanco y terminan en vioeta. Este efecto ilustra a la perfección el cambio en la percepción de los colores cuando están rodeados por diferentes colores\nEn el segundo caso, al cambiar aún más drasticamente los colores y no usar cambios de color lentos, se puede generar otro efecto visual, en este caso al concentrase en algunos puntos de la cuadricula, es posible ver lineas diagonales que atraviezan la cuadricula, estas lineas no existen, sino que son resultado de la inhibición lateral que afecta nuestros ojos.\nFinalmente en la última ilusión se intentó hacer combinaciones más complejas, sin embargo vemos que la ilusión ya no es tan evidente, ni sorprendente, sin embargo algunas personas dijeron ver que pareciera que en el centro el degradé sube más rápidamente que en los extremos laterales.\n6. Conclusión #   Nuestra vista es muy susceptible a los efectos visuales, en los cuales se usan cambios en el color frente a colores estáticos, esto que en su momento representó una ventaja evolutiva del ojo que nos permitió sobrevivir, es también lo que hace que no veamos el mundo exactamente como es. En este tipo de efectos visuales, es mejor hacer combinaciones más simples, esto permite engañar la vista más fácilmente, a diferencia de cuando hacemos uso de muchos colores y efectos, casos en los que la ilusión se puede romper mucho más fácilmente.  7. Referencias #   Inhibición lateral: la supresión de neuronas mejora la percepción sensorial Inhibición lateral El contraste simultáneo Ley del contraste simultáneo de los colores  Masking #  1. Introducción #  El masking juega un papel muy importante dentro del campo del procesamiento de imágenes ya que a través de una operación de convolución entre el kernel (matriz) y la imagen es posible aplicar efectos de desenfoque (blur), nitidez (sharpening), relieve (embossing), detección de bordes (edge detection), etc. De este hecho nace el propósito de este reporte de analizar el proceso de convolución de imágenes de tal manera que se realice un recorrido por cada uno de los conceptos que lo describen con la finalidad de obtener un panorama general. Se iniciará llevando a cabo una revisión de la bibliografía relacionada con el tema, posteriormente se realizará una descripción de la metodología utilizada para llevar a cabo el experimento, a continuación se analizarán los resultados obtenidos del experimento, luego se discutirán dichos resultados y finalmente se postularán las conclusiones del estudio.\n2. Revisión bibliográfica #  Empezaremos definiendo la convolución de imágenes como un filtro de propósito general para imágenes que consiste en determinar el valor del color de un píxel central como la suma de los valores de color ponderados de sus vecinos o píxeles adyacentes con el fin de obtener como salida la imagen modificada con el filtro. Por otro lado, definiremos un kernel como una matriz de números que es usada para realizar la convolución y que de acuerdo a los valores que esta contenga se van a producir distintos resultados para una misma imagen.\nPara introducir la fórmula general de la operación de convolución primero veremos un ejemplo:   \\[\\begin{bmatrix} 164 \u0026amp; 188 \u0026amp; 164\\\\ 178 \u0026amp; 201 \u0026amp; 197\\\\ 174 \u0026amp; 168 \u0026amp; 181 \\end{bmatrix} * \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0\\\\ 1 \u0026amp; 1 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 0 \\end{bmatrix}\\]  De aquí se quiere determinar el valor del pixel del medio, es decir, el pixel que tiene el valor actual de 201. Para determinar el nuevo valor del píxel se realizan las siguientes operaciones:\nSea V el valor de salida del pixel, C[i, j] el valor del píxel en dicha posición de la matriz, K[i, j] el valor del kernel en esa posición y F la suma de de los coeficientes del kernel o 1 si la suma de los coeficientes es 0, entonces\n \\[V = ((C[3,3]*K[1,1])\u0026#43;(C[3,2]*K[1,2])\u0026#43;(C[3,1]*K[1,3])\u0026#43;(C[2,3]*K[2,1])\u0026#43;\\\\ (C[2,2]*K[2,2]) \u0026#43; \u0026#43;(C[2,1]*K[2,3])\u0026#43;(C[1,3]*K[3,1])\u0026#43;(C[1,2]*K[3,2])\u0026#43;\\\\ (C[1,1]*K[3,3])) \\div F\\]   \\[V = ((181*0)\u0026#43;(168*1)\u0026#43;(174*0)\u0026#43;(197*1)\u0026#43;(201*1)\u0026#43;(178*1)\u0026#43;(164*0)\u0026#43;\\\\ (188*1)\u0026#43;(164*0)) \\div 5\\]   \\[V = \\frac{(168\u0026#43;197\u0026#43;201\u0026#43;178\u0026#43;188)}{5}=\\frac{932}{5}=186.4\\]  Con este ejemplo ahora introducimos la fórmula general para la operación de convolución de imágenes:  \\[V = |\\frac{\\sum{i=1}^{m} \\sum*{j=1}^{m} c*{(m-i)(n-j)} * d*{(1\u0026#43;i)(1\u0026#43;j)}}{F}|\\]  Otro concepto clave que será de utilidad para comprender el experimento realizado es el de histograma de una imagen. Tenemos que “un histograma de una imagen es un tipo de histograma que actúa como representación gráfica de la distribución tonal en una imagen digital”. El histograma de una imagen representa el número de píxeles de cada valor tonal donde el eje de abscisas (eje x) representa las variaciones tonales mientras que el eje de las ordenadas (eje y) representa el total de píxeles en ese tono específico. A modo de ejemplo observemos la siguiente imagen y su respectivo histograma:\nDel histograma tenemos que el eje de absisas indica los distitntos tonos de gris desde el negro al blanco (de izquierda a derecha). A partir de lo anterior podemos inferir que se trata de una imagen con tonos apagados, es decir, que la imagen está oscura ya que la gráfica tiende a estar sobre la parte izquierda mientras que en la parte derecha no existe información y en el caso que hubiera muchas zonas de color negro entonces la grafica seria un pico ubicado en la parte izquierda.\n3. Métodos #  Para llevar a cabo este ejercicio académico se llevó a cabo en primer lugar una revisión teórica de cada uno de los conceptos que envuelven la temática de convolución aplicado en el procesamiento de imágenes. De esta manera se investigaron distintas fuentes de información debidamente citadas de las cuales se extrajeron ideas generales acerca de conceptos clave como la operación de convolución en imágenes y los histogramas de imágenes para poder analizar el resultados de las convoluciones realizadas.\nFinalmente se desarrolló un programa con el fin de aplicar distintos kernels o matrices en la operación de convolución y de esta manera verificar la operación en la imagen y además analizar su histograma.\n4. Resultados #  A partir del estudio realizado se realizó un programa con el fin de presentar gráficamente el efecto de la operación de convolución en imágenes y analizar el cambio de las tonalidades de sus colores a través de su correspondiente histograma.\n      5. Discusión #  El programa permite ingresar los valores del kernel y posteriormente aplicar la operación al oprimir el botón apply. Un ejercicio simple pero ilustrativo es establecer todos los valores de la matriz en cero pero únicamente el valor del medio se puede ir variando por ejemplo de 0 a 2 en intervalos de 0.1, esto con el fin de aplicar un efecto que permite oscurecer o aumentar el brillo de la imagen.\nCambio en las tonalidades\n Si el valor que se estabece está entre [0,1) entonces la imagen se verá más oscura.  Si el valor que se estabece es 1 entonces la imagen no cambiará la tonalidad de sus colores.  Si el valor que se estabece está entre (1,2] entonces la imagen se verá con más brillo.   Es lógico pensar que si el valor que se toma es 1 entonces el resultado de la operación de convolución para cada píxel será el mismo color que se tenía ya que se está multiplicado únicamente ese valor por 1 y los demás por 0. Así mismo, la analogía aplicaría igual si el valor es menor o mayor 1 para oscurecer o aumentar el brillo en la imagen respectivamente.\n6. Conclusión #   La convolución es una operación matématica utilizada en varios campos de estudio (por ejemplo en señales y comunicaciones) y en el procesamiento de imágenes juega un papel importante en distintas implementaciones como filtros en aplicaciones, reconocimiento facial, entre otros. Los histogramas de imágenes son herrmientas útiles para el análisis de tonalidades de los colores ya que permiten evidenciar de manera clara características de la imagen como si existen tonos apagados, sombras o zonas oscuras, si la imagen esta en contraluz, etc.  7. Referencias #   Kernel (image processing) Image convolution - Jamie Ludwig - Portland State University El histograma Image histogram Applications of Convolution in Image Processing)  "},{"id":21,"href":"/showcase/docs/visual_computing/workshops/image_processing/","title":"Image Processing","section":"Workshops","content":"Taller Procesamiento de Imágenes #  En este taller se estudiaron distintas temáticas como lo son las máscaras de convolución (ya estudiadas en talleres anteriores), herramientas para el ampliamiento de imágenes y herramientas de luminosidad del color (utilizando distintos modelos de color), mediante el uso de shaders.\nProcesamiento de imágenes #  1. Introducción #  El masking o la aplicación de máscaras de convolución juega un papel muy importante dentro del campo del procesamiento de imágenes ya que a través ellas es posible aplicar diferentes efectos como lo son desenfoque (blur), nitidez (sharpening), relieve (embossing), detección de bordes (edge detection), entre otros. Por otro lado, las herramientas de ampliamiento de imágenes permiten aumentar o disminuir el tamaño de distintas secciones de una imágen y son ampliamente utilizadas en los ordenadores de hoy en día. Finalmente, las herramientas de luminosidad de color permiten ajustar el brillo de las imágenes a través de la aplicación de distintos modelos de color.\n2. Revisión bibliográfica #  El marco teórico relacionado con las máscaras convolucionales ya fue desarrollado en un taller previo y se puede ver aquí dentro de la sección de \u0026ldquo;Masking\u0026rdquo;.\nCon respecto al desarrollo de la herramienta de ampliación de imágenes se tiene que la ampliación es el proceso de aumentar el tamaño aparente, no físico, de algo. Esta ampliación se cuantifica mediante un número calculado también llamado \u0026ldquo;aumento\u0026rdquo;. Cuando este número es menor que uno, se refiere a una reducción de tamaño, a veces llamada minificación o desampliación. Normalmente, la ampliación está relacionada con el aumento de la escala de las imágenes para poder ver más detalles, aumentando la resolución, mediante el uso del microscopio, las técnicas de impresión o el procesamiento digital. En todos los casos, la ampliación de la imagen no cambia la perspectiva de la misma.\nFinalmente para la herramienta de luminosidad se llevó a cabo la conversión entre el modelo de color RGBA y los siguientes modelos de color:\nLuma: #  Luma representa el brillo de una imagen (la parte \u0026ldquo;en blanco y negro\u0026rdquo; o acromática de la imagen), es decir, componente que codifica la información de luminosidad de la imagen. Representa la imagen acromática, mientras que los componentes del croma representan la información del color.   \\[ Y\u0026#39; = 0.299R \u0026#43; 0.587G \u0026#43; 0.114B\\]  HSL \u0026amp; HSV: #  HSL (por sus siglas en inglés, hue, saturation, lightness) y HSV (por sus siglas en inglés, hue, saturation, value; también conocido como HSB, por sus siglas en inglés, hue, saturation, brightness) son representaciones alternativas del modelo de color RGB para ajustarse más a la forma en que la visión humana percibe los atributos del color. En estos modelos, los colores de cada matiz se disponen en una franja radial, alrededor de un eje central de colores neutros que va del negro en la parte inferior al blanco en la superior.\nLa representación HSL modela la forma en que las diferentes pinturas se mezclan para crear el color en el mundo real, con la dimensión de luminosidad que se asemeja a las cantidades variables de negro o blanco en la mezcla (por ejemplo, para crear el \u0026ldquo;rojo claro\u0026rdquo;, se puede mezclar un pigmento rojo con pintura blanca; esta pintura blanca corresponde a un valor de \u0026ldquo;luminosidad\u0026rdquo; alto en la representación HSL). Los colores totalmente saturados se colocan alrededor de un círculo con un valor de luminosidad de 0.5, y un valor de luminosidad de 0 o 1 corresponde a un color totalmente negro o blanco, respectivamente.\nLa representación HSV modela cómo aparecen los colores bajo la luz. La diferencia entre HSL y HSV es que un color con la máxima luminosidad en HSL es blanco puro, pero un color con el máximo valor/brillo en HSV es análogo a iluminar con una luz blanca un objeto de color (por ejemplo, iluminar con una luz blanca brillante un objeto rojo hace que el objeto siga pareciendo rojo, sólo que más brillante e intenso, mientras que iluminar con una luz tenue un objeto rojo hace que el objeto parezca más oscuro y menos brillante).\nConversión RGB a HSL:  \\[ Cmax = max(R, G, B)\\\\ Cmin = min(R, G, B)\\\\ \\Delta = Cmax - Cmin\\]  Calculo de la luminosidad:  \\[ L = \\frac{(Cmax\u0026#43;Cmin)}{2}\\]  Calculo de la tonalidad (Hue):  \\[ H = \\left\\{ \\begin{array}{lr} 0^\\circ, \u0026amp; \\text{if } \\Delta = 0\\\\ 60^\\circ * (\\frac{G-B}{\\Delta}mod6), \u0026amp; \\text{if } Cmax = R\\\\ 60^\\circ * (\\frac{B-R}{\\Delta}\u0026#43;2), \u0026amp; \\text{if } Cmax = G\\\\ 60^\\circ * (\\frac{R-G}{\\Delta}\u0026#43;4), \u0026amp; \\text{if } Cmax = B \\end{array} \\right\\}\\]  Calculo de la saturación:  \\[ S = \\left\\{ \\begin{array}{lr} 0^\\circ, \u0026amp; \\text{if } \\Delta = 0\\\\ \\frac{\\Delta}{1-|2L-1|}, \u0026amp; \\text{if } Cmax = R \\end{array} \\right\\}\\]  Conversión RGB a HSV: Los calculos para la conversión de RGB a HSV son similares a los de HSL, el componente de tonalidad se calcula de la misma manera.\nCalculo del brillo:  \\[ V = Cmax\\]  Calculo de la tonalidad (Hue): igual que en HSL.\nCalculo de la saturación:  \\[ S = \\left\\{ \\begin{array}{lr} 0^\\circ, \u0026amp; \\text{if } Cmax = 0\\\\ \\frac{\\Delta}{Cmax}, \u0026amp; \\text{if } Cmax \\neq 0 \\end{array} \\right\\}\\]  CIELAB: #  El espacio de color CIELAB, también denominado Lab* , es un espacio de color definido por la Comisión Internacional de Iluminación (abreviada CIE) en 1976. Expresa el color en tres valores: L* para la luminosidad perceptiva, y a* y b* para los cuatro colores únicos de la visión humana: rojo, verde, azul y amarillo. El CIELAB se concibió como un espacio perceptualmente uniforme, en el que un cambio numérico determinado corresponde a un cambio percibido similar en el color. Aunque el espacio LAB no es realmente uniforme desde el punto de vista de la percepción, resulta útil en la industria para detectar pequeñas diferencias de color.\nAl igual que el espacio CIEXYZ del que deriva, el espacio de color CIELAB es un modelo de \u0026ldquo;observador estándar\u0026rdquo; independiente del dispositivo. Los colores que define no son relativos a ningún dispositivo concreto, como un monitor de ordenador o una impresora, sino que se refieren al observador estándar de la CIE, que es un promedio de los resultados de los experimentos de coincidencia de colores en condiciones de laboratorio.\nPara poder convertir de RGB a CIELAB primero habrá que convertir de RGB a CIEXYZ y luego de CIEXYZ a CIELAB como se muestra a continuación:\nRGB a CIEXYZ:  \\[X_{tmp} = \\left\\{ \\begin{array}{lr} (\\frac{R \u0026#43; 0.055}{1.055}^{2.4}), \u0026amp; \\text{if } R \u0026gt; 0.04045\\\\ R \\div 12.92, \u0026amp; \\text{otherwise} \\end{array} \\right\\}\\\\ Y_{tmp} = \\left\\{ \\begin{array}{lr} (\\frac{G \u0026#43; 0.055}{1.055}^{2.4}), \u0026amp; \\text{if } G \u0026gt; 0.04045\\\\ G \\div 12.92, \u0026amp; \\text{otherwise} \\end{array} \\right\\}\\\\ Z_{tmp} = \\left\\{ \\begin{array}{lr} (\\frac{B \u0026#43; 0.055}{1.055}^{2.4}), \u0026amp; \\text{if } B \u0026gt; 0.04045\\\\ B \\div 12.92, \u0026amp; \\text{otherwise} \\end{array} \\right\\}\\\\\\]  Finalmente tenemos:\n \\[\\begin{bmatrix} X\\\\ Y\\\\ Z \\end{bmatrix} = 100 * \\begin{bmatrix} X_{tmp}\\\\ Y_{tmp}\\\\ Z_{tmp} \\end{bmatrix} * \\begin{bmatrix} 0.4124 \u0026amp; 0.3576 \u0026amp; 0.1805\\\\ 0.2126 \u0026amp; 0.7152 \u0026amp; 0.0722\\\\ 0.0193 \u0026amp; 0.1192 \u0026amp; 0.9505 \\end{bmatrix}\\]  CIEXYZ a CIELAB:\n \\[n = \\begin{bmatrix} X\\\\ Y\\\\ Z \\end{bmatrix} \\ div \\begin{bmatrix} 95.047\\\\ 100\\\\ 108.883 \\end{bmatrix}\\\\\\]  Definimos un vextor v de tamaño 3 de tal manera que cada una de sus componentes se definen como:\n \\[v_0 = \\left\\{ \\begin{array}{lr} n_0^{\\frac{1}{3}}, \u0026amp; \\text{if } n_0 \u0026gt; 0.008856\\\\ ( 7.787 * n_0 ) \u0026#43; ( \\frac{16.0}{116.0} ), \u0026amp; \\text{otherwise} \\end{array} \\right\\}\\\\ v_1 = \\left\\{ \\begin{array}{lr} n_1^{\\frac{1}{3}}, \u0026amp; \\text{if } n_1 \u0026gt; 0.008856\\\\ ( 7.787 * n_1 ) \u0026#43; ( \\frac{16.0}{116.0} ), \u0026amp; \\text{otherwise} \\end{array} \\right\\}\\\\ v_0 = \\left\\{ \\begin{array}{lr} n_2^{\\frac{1}{3}}, \u0026amp; \\text{if } n_2 \u0026gt; 0.008856\\\\ ( 7.787 * n_2 ) \u0026#43; ( \\frac{16.0}{116.0} ), \u0026amp; \\text{otherwise} \\end{array} \\right\\}\\]  Finalmente el resultado sería:  \\[\\begin{bmatrix} L\\\\ A\\\\ B \\end{bmatrix} = \\begin{bmatrix} ( 116.0 * v_1 ) - 16.0\\\\ 500.0 * ( v_0 - v_1 )\\\\ 200.0 * ( v_1 - v_2 ) \\end{bmatrix}\\]  3. Métodos #  Para la realización de este ejercicio se llevó a cabo en primer lugar una revisión teórica de cada temática anteriormente mencionada relacionada con el procesamiento de imágenes. De esta manera tomando como apoyo la teoría estudida y ejemplos similiares de implementaciones ajustados a las necesidades se desarrollaron tres aplicaciones distintas, las cuales permiten observar de manera práctica la aplicación de cada uno de los temas.\n4. Resultados #  4.1 Masking #  Funcionalidades utilizadas de glsl: #   step(i, edge): Genera una función escalonada comparando dos valores. distance(p0, p1): Calcula la distancia entre dos puntos.  p5 - masking shader code {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;675\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}}  let maskShader;  let img;  let video_src;  let video_on;  let mask1 = true, mask2 = mask3 = mask4 = false;   function preload() {  video_src = createVideo([\u0026#39;/showcase/sketches/gopro.webm\u0026#39;]);  video_src.hide(); // by default video shows up in separate dom  maskShader = readShader(\u0026#39;/showcase/scripts/mask.frag\u0026#39;, { varyings: Tree.texcoords2 });  img = loadImage(\u0026#39;/showcase/sketches/flowers.jpg\u0026#39;);  }   function setup() {  createCanvas(650, 500, WEBGL);  noStroke();  textureMode(NORMAL);  video_on = createCheckbox(\u0026#39;video\u0026#39;, false);  video_on.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;);  video_on.changed(() =\u0026gt; {  if (video_on.checked()) {  maskShader.setUniform(\u0026#39;texture\u0026#39;, video_src);  video_src.loop();  } else {  maskShader.setUniform(\u0026#39;texture\u0026#39;, img);  video_src.pause();  }  });  video_on.position(10, 60);   // Blur select  sel1 = createSelect();  sel1.position(10, 10);  sel1.option(\u0026#39;original\u0026#39;);  sel1.option(\u0026#39;ridges\u0026#39;);  sel1.option(\u0026#39;blur1\u0026#39;);  sel1.option(\u0026#39;blur2\u0026#39;);  sel1.changed(changeMask);   // Region shape select  sel2 = createSelect();  sel2.position(10, 35);  sel2.option(\u0026#39;square\u0026#39;);  sel2.option(\u0026#39;circle\u0026#39;);  sel2.changed(changeRegionShape);   shader(maskShader);  maskShader.setUniform(\u0026#39;texture\u0026#39;, img);  emitTexOffset(maskShader, img, \u0026#39;texOffset\u0026#39;);  maskShader.setUniform(\u0026#39;region_shape\u0026#39;, true);  emitResolution(maskShader);  }   function draw() {  background(0);  emitMousePosition(maskShader);  if (mask1) {  maskShader.setUniform(\u0026#39;mask\u0026#39;, [0, 0, 0, 0, 1, 0, 0, 0, 0]);  } else if(mask2){  maskShader.setUniform(\u0026#39;mask\u0026#39;, [-1, -1, -1, -1, 8, -1, -1, -1, -1]);  } else if(mask3){  maskShader.setUniform(\u0026#39;mask\u0026#39;, [1/9, 1/9, 1/9, 1/9, 1/9, 1/9, 1/9, 1/9, 1/9]);  } else if(mask4) {  maskShader.setUniform(\u0026#39;mask\u0026#39;, [0, -1, 0, -1, 5, -1, 0, -1, 0]);  }  quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2);  }   function changeMask(){  let selection = sel1.value();  mask1 = mask2 = mask3 = mask4 = false;  if (selection == \u0026#39;original\u0026#39;) {  mask1 = true;  } else if(selection == \u0026#39;ridges\u0026#39;){  mask2 = true;  } else if(selection == \u0026#39;blur1\u0026#39;){  mask3 = true;  } else if(selection == \u0026#39;blur2\u0026#39;) {  mask4 = true;  }  }   function changeRegionShape(){  let selection = sel2.value();  if (selection == \u0026#39;square\u0026#39;) {  maskShader.setUniform(\u0026#39;region_shape\u0026#39;, true);  } else {  maskShader.setUniform(\u0026#39;region_shape\u0026#39;, false);  }  } {{\u0026lt; /p5-global-iframe \u0026gt;}}    mask.frag {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;675\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}}   precision mediump float;  uniform sampler2D texture; uniform vec2 texOffset; // holds the 3x3 kernel uniform float mask[9]; // mouse vector position uniform vec2 u_mouse; // resolution uniform vec2 u_resolution; // region shape uniform bool region_shape;  // we need our interpolated tex coord varying vec2 texcoords2;  void main() {  bool condition;  vec2 st = gl_FragCoord.xy/u_resolution;  if(region_shape){  vec2 mouse_n = u_mouse.xy/u_resolution;  float region_x = step(mouse_n.x - 0.1, st.x) - step(mouse_n.x + 0.1, st.x);  float region_y = step(mouse_n.y - 0.1, st.y) - step(mouse_n.y + 0.1, st.y);  condition = region_x == 1.0 \u0026amp;\u0026amp; region_y == 1.0;  } else {  float region = distance(st, u_mouse.xy/u_resolution);  condition = region \u0026lt; 0.1;  }  if(condition){  // 1. Use offset to move along texture space.  // In this case to find the texcoords of the texel neighbours.  vec2 tc0 = texcoords2 + vec2(-texOffset.s, -texOffset.t);  vec2 tc1 = texcoords2 + vec2( 0.0, -texOffset.t);  vec2 tc2 = texcoords2 + vec2(+texOffset.s, -texOffset.t);  vec2 tc3 = texcoords2 + vec2(-texOffset.s, 0.0);  // origin (current fragment texcoords)  vec2 tc4 = texcoords2 + vec2( 0.0, 0.0);  vec2 tc5 = texcoords2 + vec2(+texOffset.s, 0.0);  vec2 tc6 = texcoords2 + vec2(-texOffset.s, +texOffset.t);  vec2 tc7 = texcoords2 + vec2( 0.0, +texOffset.t);  vec2 tc8 = texcoords2 + vec2(+texOffset.s, +texOffset.t);   // 2. Sample texel neighbours within the rgba array  vec4 rgba[9];  rgba[0] = texture2D(texture, tc0);  rgba[1] = texture2D(texture, tc1);  rgba[2] = texture2D(texture, tc2);  rgba[3] = texture2D(texture, tc3);  rgba[4] = texture2D(texture, tc4);  rgba[5] = texture2D(texture, tc5);  rgba[6] = texture2D(texture, tc6);  rgba[7] = texture2D(texture, tc7);  rgba[8] = texture2D(texture, tc8);   // 3. Apply convolution kernel  vec4 convolution;  for (int i = 0; i \u0026lt; 9; i++) {  convolution += rgba[i]*mask[i];  }   // 4. Set color from convolution  gl_FragColor = vec4(convolution.rgb, 1.0);  } else {  gl_FragColor = texture2D(texture, texcoords2);  } } {{\u0026lt; /p5-global-iframe \u0026gt;}}          let maskShader; let img; let video_src; let video_on; let mask1 = true, mask2 = mask3 = mask4 = false; function preload() { video_src = createVideo([\u0026#39;/showcase/sketches/gopro.webm\u0026#39;]); video_src.hide(); // by default video shows up in separate dom maskShader = readShader(\u0026#39;/showcase/scripts/mask.frag\u0026#39;, { varyings: Tree.texcoords2 }); img = loadImage(\u0026#39;/showcase/sketches/flowers.jpg\u0026#39;); } function setup() { createCanvas(650, 500, WEBGL); noStroke(); textureMode(NORMAL); video_on = createCheckbox(\u0026#39;video\u0026#39;, false); video_on.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); video_on.changed(() =\u0026gt; { if (video_on.checked()) { maskShader.setUniform(\u0026#39;texture\u0026#39;, video_src); video_src.loop(); } else { maskShader.setUniform(\u0026#39;texture\u0026#39;, img); video_src.pause(); } }); video_on.position(10, 60); // Blur select sel1 = createSelect(); sel1.position(10, 10); sel1.option(\u0026#39;original\u0026#39;); sel1.option(\u0026#39;ridges\u0026#39;); sel1.option(\u0026#39;blur1\u0026#39;); sel1.option(\u0026#39;blur2\u0026#39;); sel1.changed(changeMask); // Region shape select sel2 = createSelect(); sel2.position(10, 35); sel2.option(\u0026#39;square\u0026#39;); sel2.option(\u0026#39;circle\u0026#39;); sel2.changed(changeRegionShape); shader(maskShader); maskShader.setUniform(\u0026#39;texture\u0026#39;, img); emitTexOffset(maskShader, img, \u0026#39;texOffset\u0026#39;); maskShader.setUniform(\u0026#39;region_shape\u0026#39;, true); emitResolution(maskShader); } function draw() { background(0); emitMousePosition(maskShader); if (mask1) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [0, 0, 0, 0, 1, 0, 0, 0, 0]); } else if(mask2){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [-1, -1, -1, -1, 8, -1, -1, -1, -1]); } else if(mask3){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [1/9, 1/9, 1/9, 1/9, 1/9, 1/9, 1/9, 1/9, 1/9]); } else if(mask4) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [0, -1, 0, -1, 5, -1, 0, -1, 0]); } quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); } function changeMask(){ let selection = sel1.value(); mask1 = mask2 = mask3 = mask4 = false; if (selection == \u0026#39;original\u0026#39;) { mask1 = true; } else if(selection == \u0026#39;ridges\u0026#39;){ mask2 = true; } else if(selection == \u0026#39;blur1\u0026#39;){ mask3 = true; } else if(selection == \u0026#39;blur2\u0026#39;) { mask4 = true; } } function changeRegionShape(){ let selection = sel2.value(); if (selection == \u0026#39;square\u0026#39;) { maskShader.setUniform(\u0026#39;region_shape\u0026#39;, true); } else { maskShader.setUniform(\u0026#39;region_shape\u0026#39;, false); } }      \"  4.2 Magnifier tool #  Funcionalidades utilizadas de glsl: #   distance(p0, p1).  p5 - magnifier tool code {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;675\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}}  let magnifierShader;  let img;  let video_src;  let video_on;  let slider1, slider2;   function preload() {  video_src = createVideo([\u0026#39;/showcase/sketches/gopro.webm\u0026#39;]);  video_src.hide(); // by default video shows up in separate dom  magnifierShader = readShader(\u0026#39;/showcase/scripts/magnifier.frag\u0026#39;, { varyings: Tree.texcoords2 | Tree.position2 });  img = loadImage(\u0026#39;/showcase/sketches/mahakala.jpg\u0026#39;);  }   function setup() {  createCanvas(650, 500, WEBGL);  noStroke();  textureMode(NORMAL);  video_on = createCheckbox(\u0026#39;video\u0026#39;, false);  video_on.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;);  video_on.changed(() =\u0026gt; {  if (video_on.checked()) {  magnifierShader.setUniform(\u0026#39;texture\u0026#39;, video_src);  video_src.loop();  } else {  magnifierShader.setUniform(\u0026#39;texture\u0026#39;, img);  video_src.pause();  }  });  video_on.position(10, 50);   slider1 = createSlider(100, 600, 100, 50);  slider1.position(10, 10);   slider2 = createSlider(1, 9, 1, 1);  slider2.position(10, 30);   shader(magnifierShader);  magnifierShader.setUniform(\u0026#39;texture\u0026#39;, img);  magnifierShader.setUniform(\u0026#39;radio\u0026#39;, 100.0);  magnifierShader.setUniform(\u0026#39;scale\u0026#39;, 0.1);  emitResolution(magnifierShader);  }   function draw() {  background(0);  emitMousePosition(magnifierShader);  magnifierShader.setUniform(\u0026#39;radio\u0026#39;, slider1.value());  magnifierShader.setUniform(\u0026#39;scale\u0026#39;, slider2.value() / 10);  quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2);  } {{\u0026lt; /p5-global-iframe \u0026gt;}}    magnifier.frag {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;675\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}}  precision mediump float;  uniform sampler2D texture; uniform float radio; uniform float scale;  // mouse vector position uniform vec2 u_mouse;  // resolution uniform vec2 u_resolution;  vec2 curvatureGenerator(vec2 toPow, float dis){  float x = dis/radio;  return toPow*(1.0-x)*exp(-2.0*x*x); }  void main() {  vec2 uv = gl_FragCoord.xy / u_resolution.xy;  gl_FragColor = texture2D(texture, vec2(uv.x, 1. - uv.y));  vec2 center = u_mouse.xy;  float dis = distance(gl_FragCoord.xy, center);  if(dis \u0026lt; radio){  vec2 disV = gl_FragCoord.xy - center;  vec2 trueUV = (gl_FragCoord.xy - (curvatureGenerator(disV,dis) * scale) ) / u_resolution.xy;  gl_FragColor = texture2D(texture, vec2(trueUV.x, 1. - trueUV.y));  } } {{\u0026lt; /p5-global-iframe \u0026gt;}}          let magnifierShader; let img; let video_src; let video_on; let slider1, slider2; function preload() { video_src = createVideo([\u0026#39;/showcase/sketches/gopro.webm\u0026#39;]); video_src.hide(); // by default video shows up in separate dom magnifierShader = readShader(\u0026#39;/showcase/scripts/magnifier.frag\u0026#39;, { varyings: Tree.texcoords2 | Tree.position2 }); img = loadImage(\u0026#39;/showcase/sketches/mahakala.jpg\u0026#39;); } function setup() { createCanvas(650, 500, WEBGL); noStroke(); textureMode(NORMAL); video_on = createCheckbox(\u0026#39;video\u0026#39;, false); video_on.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); video_on.changed(() =\u0026gt; { if (video_on.checked()) { magnifierShader.setUniform(\u0026#39;texture\u0026#39;, video_src); video_src.loop(); } else { magnifierShader.setUniform(\u0026#39;texture\u0026#39;, img); video_src.pause(); } }); video_on.position(10, 50); slider1 = createSlider(100, 600, 100, 50); slider1.position(10, 10); slider2 = createSlider(1, 9, 1, 1); slider2.position(10, 30); shader(magnifierShader); magnifierShader.setUniform(\u0026#39;texture\u0026#39;, img); magnifierShader.setUniform(\u0026#39;radio\u0026#39;, 100.0); magnifierShader.setUniform(\u0026#39;scale\u0026#39;, 0.1); emitResolution(magnifierShader); } function draw() { background(0); emitMousePosition(magnifierShader); magnifierShader.setUniform(\u0026#39;radio\u0026#39;, slider1.value()); magnifierShader.setUniform(\u0026#39;scale\u0026#39;, slider2.value() / 10); quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); }      \"  4.3 Coloring brightness tools #  Funcionalidades utilizadas de glsl: #   mix(x, y, a): Restringe un valor para que se encuentre entre otros dos valores. x especifica el inicio del rango en el que se va a interpolar, y especifica el final del rango en el que se va a interpolar y a especifica el valor a utilizar para interpolar entre x e y. step(i, edge). min(x, y): Devuelve el menor de dos valores. abs(x): Devuelve el valor absoluto del parámetro. max(x, y): Devuelve el mayor de dos valores. pow(x, y): Devuelve el valor del primer parámetro elevado a la potencia del segundo. mat3(x1, x2, \u0026hellip;, xn): Declara una matriz de tamaño 3x3.  p5 - coloring brightness tool code {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;675\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}}  let coloringShader;  let img;  let video_src;  let video_on;  let original = true, luma = hsv = hsl = lab = false;   function preload() {  video_src = createVideo([\u0026#39;/showcase/sketches/gopro.webm\u0026#39;]);  video_src.hide(); // by default video shows up in separate dom  coloringShader = readShader(\u0026#39;/showcase/scripts/coloring.frag\u0026#39;, { varyings: Tree.texcoords2 });  img = loadImage(\u0026#39;/showcase/sketches/fire.jpg\u0026#39;);  }   function setup() {  createCanvas(650, 500, WEBGL);  noStroke();  textureMode(NORMAL);  video_on = createCheckbox(\u0026#39;video\u0026#39;, false);  video_on.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;);  video_on.changed(() =\u0026gt; {  if (video_on.checked()) {  coloringShader.setUniform(\u0026#39;texture\u0026#39;, video_src);  video_src.loop();  } else {  coloringShader.setUniform(\u0026#39;texture\u0026#39;, img);  video_src.pause();  }  });  video_on.position(10, 35);   // Coloring select  sel1 = createSelect();  sel1.position(10, 10);  sel1.option(\u0026#39;original\u0026#39;);  sel1.option(\u0026#39;luma\u0026#39;);  sel1.option(\u0026#39;HSV\u0026#39;);  sel1.option(\u0026#39;HSL\u0026#39;);  sel1.option(\u0026#39;CIELAB\u0026#39;);  sel1.changed(changeColoring);   shader(coloringShader);  initializeUniforms();  coloringShader.setUniform(\u0026#39;texture\u0026#39;, img);  }   function draw() {  background(0);  if (original) {  coloringShader.setUniform(\u0026#39;original\u0026#39;, true);  } else if(luma){  coloringShader.setUniform(\u0026#39;luma\u0026#39;, true);  } else if(hsv){  coloringShader.setUniform(\u0026#39;hsv\u0026#39;, true);  } else if(hsl){  coloringShader.setUniform(\u0026#39;hsl\u0026#39;, true);  } else if(lab){  coloringShader.setUniform(\u0026#39;lab\u0026#39;, true);  }  quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2);  }   function changeColoring(){  let selection = sel1.value();  original = luma = hsv = hsl = lab = false;  resetUniformsFalse();  if (selection == \u0026#39;original\u0026#39;) {  original = true;  } else if(selection == \u0026#39;luma\u0026#39;){  luma = true;  } else if(selection == \u0026#39;HSV\u0026#39;){  hsv = true;  } else if(selection == \u0026#39;HSL\u0026#39;){  hsl = true;  } else if(selection == \u0026#39;CIELAB\u0026#39;){  lab = true;  }  }   function initializeUniforms(){  resetUniformsFalse();  coloringShader.setUniform(\u0026#39;original\u0026#39;, true);  }   function resetUniformsFalse(){  coloringShader.setUniform(\u0026#39;original\u0026#39;, false);  coloringShader.setUniform(\u0026#39;luma\u0026#39;, false);  coloringShader.setUniform(\u0026#39;hsv\u0026#39;, false);  coloringShader.setUniform(\u0026#39;hsl\u0026#39;, false);  coloringShader.setUniform(\u0026#39;lab\u0026#39;, false);  } {{\u0026lt; /p5-global-iframe \u0026gt;}}    coloring.frag {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;675\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}} precision mediump float;  // uniforms are defined and sent by the sketch uniform bool grey_scale; uniform sampler2D texture; uniform bool original; uniform bool luma; uniform bool hsv; uniform bool hsl; uniform bool lab;  // interpolated texcoord (same name and type as in vertex shader) varying vec2 texcoords2;  // returns luma of given texel float apply_luma(vec3 texel) {  return 0.299 * texel.r + 0.587 * texel.g + 0.114 * texel.b; }  // returns hsv of given texel float apply_hsv(vec3 texel) {  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);  vec4 p = mix(vec4(texel.bg, K.wz), vec4(texel.gb, K.xy), step(texel.b, texel.g));  vec4 q = mix(vec4(p.xyw, texel.r), vec4(texel.r, p.yzx), step(p.x, texel.r));   float d = q.x - min(q.w, q.y);  float e = 1.0e-10;  return abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x; }  // returns hls of given texel float apply_hsl(vec3 texel) {  float h = 0.0; \tfloat s = 0.0; \tfloat l = 0.0; \tfloat r = texel.r; \tfloat g = texel.g; \tfloat b = texel.b; \tfloat cMin = min( r, min( g, b ) ); \tfloat cMax = max( r, max( g, b ) );  \tl = ( cMax + cMin ) / 2.0; \tif ( cMax \u0026gt; cMin ) { \tfloat cDelta = cMax - cMin;  \ts = l \u0026lt; .0 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) );  \tif ( r == cMax ) { \th = ( g - b ) / cDelta; \t} else if ( g == cMax ) { \th = 2.0 + ( b - r ) / cDelta; \t} else { \th = 4.0 + ( r - g ) / cDelta; \t}  \tif ( h \u0026lt; 0.0) { \th += 6.0; \t} \th = h / 6.0; \t} \treturn h, s, l; }  // ------------------------- RGB TO CIELAB ------------------------------------  vec3 rgb2xyz (vec3 texel) { \tvec3 tmp;  tmp.x = ( texel.r \u0026gt; 0.04045 ) ? pow( ( texel.r + 0.055 ) / 1.055, 2.4 ) : texel.r / 12.92;  tmp.y = ( texel.g \u0026gt; 0.04045 ) ? pow( ( texel.g + 0.055 ) / 1.055, 2.4 ) : texel.g / 12.92,  tmp.z = ( texel.b \u0026gt; 0.04045 ) ? pow( ( texel.b + 0.055 ) / 1.055, 2.4 ) : texel.b / 12.92;  const mat3 mat = mat3( \t0.4124, 0.3576, 0.1805,  0.2126, 0.7152, 0.0722,  0.0193, 0.1192, 0.9505 \t);  return 100.0 * tmp * mat; }  vec3 xyz2lab (vec3 xyz) { \tvec3 n = xyz / vec3(95.047, 100, 108.883);  vec3 v;  v.x = ( n.x \u0026gt; 0.008856 ) ? pow( n.x, 1.0 / 3.0 ) : ( 7.787 * n.x ) + ( 16.0 / 116.0 );  v.y = ( n.y \u0026gt; 0.008856 ) ? pow( n.y, 1.0 / 3.0 ) : ( 7.787 * n.y ) + ( 16.0 / 116.0 );  v.z = ( n.z \u0026gt; 0.008856 ) ? pow( n.z, 1.0 / 3.0 ) : ( 7.787 * n.z ) + ( 16.0 / 116.0 );  return vec3(( 116.0 * v.y ) - 16.0, 500.0 * ( v.x - v.y ), 200.0 * ( v.y - v.z )); }  vec3 apply_lab(vec3 texel){ \treturn xyz2lab(rgb2xyz(texel)); }  // -----------------------------------------------------------  void main() {  // texture2D(texture, texcoords2) samples texture at texcoords2  // and returns the normalized texel color  vec4 texel = texture2D(texture, texcoords2);  if (original){  gl_FragColor = texel;  } else if(luma){  gl_FragColor = vec4((vec3(apply_luma(texel.rgb))), 1.0);  } else if(hsv){  gl_FragColor = vec4((vec3(apply_hsv(texel.rgb))), 1.0);  } else if(hsl){  gl_FragColor = vec4((vec3(apply_hsl(texel.rgb))), 1.0);  } else if(lab){ \tgl_FragColor = vec4((apply_lab(texel.rgb)), 1.0);  } } {{\u0026lt; /p5-global-iframe \u0026gt;}}          let coloringShader; let img; let video_src; let video_on; let original = true, luma = hsv = hsl = lab = false; function preload() { video_src = createVideo([\u0026#39;/showcase/sketches/gopro.webm\u0026#39;]); video_src.hide(); // by default video shows up in separate dom coloringShader = readShader(\u0026#39;/showcase/scripts/coloring.frag\u0026#39;, { varyings: Tree.texcoords2 }); img = loadImage(\u0026#39;/showcase/sketches/fire.jpg\u0026#39;); } function setup() { createCanvas(650, 500, WEBGL); noStroke(); textureMode(NORMAL); video_on = createCheckbox(\u0026#39;video\u0026#39;, false); video_on.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); video_on.changed(() =\u0026gt; { if (video_on.checked()) { coloringShader.setUniform(\u0026#39;texture\u0026#39;, video_src); video_src.loop(); } else { coloringShader.setUniform(\u0026#39;texture\u0026#39;, img); video_src.pause(); } }); video_on.position(10, 35); // Coloring select sel1 = createSelect(); sel1.position(10, 10); sel1.option(\u0026#39;original\u0026#39;); sel1.option(\u0026#39;luma\u0026#39;); sel1.option(\u0026#39;HSV\u0026#39;); sel1.option(\u0026#39;HSL\u0026#39;); sel1.option(\u0026#39;CIELAB\u0026#39;); sel1.changed(changeColoring); shader(coloringShader); initializeUniforms(); coloringShader.setUniform(\u0026#39;texture\u0026#39;, img); } function draw() { background(0); if (original) { coloringShader.setUniform(\u0026#39;original\u0026#39;, true); } else if(luma){ coloringShader.setUniform(\u0026#39;luma\u0026#39;, true); } else if(hsv){ coloringShader.setUniform(\u0026#39;hsv\u0026#39;, true); } else if(hsl){ coloringShader.setUniform(\u0026#39;hsl\u0026#39;, true); } else if(lab){ coloringShader.setUniform(\u0026#39;lab\u0026#39;, true); } quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); } function changeColoring(){ let selection = sel1.value(); original = luma = hsv = hsl = lab = false; resetUniformsFalse(); if (selection == \u0026#39;original\u0026#39;) { original = true; } else if(selection == \u0026#39;luma\u0026#39;){ luma = true; } else if(selection == \u0026#39;HSV\u0026#39;){ hsv = true; } else if(selection == \u0026#39;HSL\u0026#39;){ hsl = true; } else if(selection == \u0026#39;CIELAB\u0026#39;){ lab = true; } } function initializeUniforms(){ resetUniformsFalse(); coloringShader.setUniform(\u0026#39;original\u0026#39;, true); } function resetUniformsFalse(){ coloringShader.setUniform(\u0026#39;original\u0026#39;, false); coloringShader.setUniform(\u0026#39;luma\u0026#39;, false); coloringShader.setUniform(\u0026#39;hsv\u0026#39;, false); coloringShader.setUniform(\u0026#39;hsl\u0026#39;, false); coloringShader.setUniform(\u0026#39;lab\u0026#39;, false); }      \"  5. Discusión #  Partiendo de los resultados obtenidos se puede evidenciar especialmente en el caso de masking o aplicación de máscaras de convolución sobre imágenes que el uso de shaders facilita la implementación de diferentes efectos visuales. No obstante, para esto se necesita familiarizarse con OpenGL Shading Language (GLSL) el cual tiene una curva de aprendizaje lenta si no se tienen los suficientes conocimientos o bases teóricas para la implementación de shaders. Por otro lado, vemos que con el uso de shaders se pueden llegar a desarrollar un sin fin de aplicaciones para distintos propósitos debido a su gran campo de aplicación.\n6. Conclusión #    A comparación con el taller de Masksing desarrollado previamente el uso de shaders facilita la implementación de la aplicación de máscaras de convolución sobre diferentes imágenes.\n  Las herramientas de ampliación e iluminación de imágenes permiten el análisis de distintos aspectos de una imágen permitiendo observar detalles que a simple vista no son perceptibles.\n  7. Referencias #   Magnifier tool example Region of interest Coloring brigthness tools HSV coloring model conversion example HSL coloring conversion model example Lab color space converter THe Book of Shaders GLSL Programming/Vector and Matrix Operations Luma (Video) - Wikipedia RGB TO HSL color conversion HSL \u0026amp; HSV - Wikipedia CIELAB color space - Wikipedia Magnification  "},{"id":22,"href":"/showcase/docs/visual_computing/workshops/main_spaces/","title":"Main Spaces","section":"Workshops","content":"Taller Main Spaces #  1. Introducción #  En este taller se exploraron las posibilidades de las transformaciones espaciales para la producción de piezas en 3D, especialmente se hace uso de estas transformaciónes al proyectar los resultados de la pieza 3D en la pantalla, así como a partir de movimientos y gestos realizados sobre la pantalla modificar la pieza 3D al agregar objetos en su mundo, esto sin contar con las transformaciónes intermedias para lograr algunos efectos en la pantalla como la iluminación.\n2. Revisión bibliográfica #  Dentro de las transformaciones espaciales que podemos encontrar diferentes conjuntos de transformaciones que nos pueden ayudar a producir todo tipo de figuras en un espacio 3D.\nTransformaciones lineales #  El primero de estos tipos es transformaciones lineales, estas comprenden la rotación, cambio de escala, proyexión ortogonal, y reflexión.\nPara realizar una transformación lineal hay dos caminos, transformar el espacio de coordenadas en el que se esta dibujando o transformar el objeto. Cualquiera de estas opciones es equivalente a la otra en el sentido opuesto, por ejemplo rotar un objeto 20° en el sentido de las manecillas del reloj es equivalente a rotar el espacio de coordenadas del objeto 20° en el sentido contrario a las manecillas del reloj. De igual forma, una combinación de transformaciones lineales a un objeto es equivalente las mismas operaciónes en sentido y orden contrario. Para poder realizar estas transformaciones se utilizan operaciónes matriciales sobre las coordenadas.\nLas matrices que nos permiten realizar estas transfotmaciones son:\nRotación sobre un eje aleatorio #  En este se realiza una rotación en un angulo   \\(\\theta\\)  sobre un eje definido por un vector unitario  \\(n\\)  , esto permite realizar la rotación en cualquier sentido incluido el de cualquiera de los ejes x, y o z  \\[R(n,\\theta) = \\begin{bmatrix} p\u0026#39;\\\\ q\u0026#39;\\\\ r\u0026#39; \\end{bmatrix}\\\\ R(n,\\theta) = \\begin{bmatrix} n_x^2(1-cos \\theta) \u0026#43; cos\\theta \u0026amp; n_x n_y(1-cos \\theta) \u0026#43; n_z sin \\theta \u0026amp; n_x n_z(1-cos \\theta) \u0026#43; n_y sin \\theta\\\\ n_x n_y(1-cos \\theta) - n_z sin\\theta \u0026amp; n_y^2(1-cos \\theta) \u0026#43; cos \\theta \u0026amp; n_y n_z(1-cos \\theta) \u0026#43; n_x sin \\theta\\\\ n_x n_z(1-cos \\theta) \u0026#43; n_y sin\\theta \u0026amp; n_y n_z(1-cos \\theta) - n_x sin \\theta \u0026amp; n_z^2(1-cos \\theta) \u0026#43; cos \\theta\\\\ \\end{bmatrix}\\]  Escalamiento en una dirección aleatoria #  En este se realiza un escalado por un factor  \\(k\\)  en un eje definido por un vector unitario  \\(n\\)  , esto permite realizar el escalamiento en cualquier sentido incluido el de cualquiera de los ejes x, y o z  \\[S(n,k) = \\begin{bmatrix} p\u0026#39;\\\\ q\u0026#39;\\\\ r\u0026#39; \\end{bmatrix}= \\begin{bmatrix} 1\u0026#43;(k-1)n_x^2 \u0026amp; (k-1)n_x n_y \u0026amp; (k-1)n_x n_z\\\\ (k-1)n_x n_y \u0026amp; 1\u0026#43;(k-1)n_y^2 \u0026amp; (k-1)n_y n_z\\\\ (k-1)n_x n_z \u0026amp; (k-1)n_y n_z \u0026amp; 1\u0026#43;(k-1)n_z^2\\\\ \\end{bmatrix}\\]  Proyección y reflexión sobre en un plano aleatorio #  Estas operaciones son derivadas del escalamiento, en el caso de la proyección se realiza escalando por un factor de 0 en la dirección en la que se quiere proyectar la figura y en el caso de la reflexión se aplica un factor de -1, por simplicidad no se presenta las matrices de estas transformación, que se derivan de la matriz de escalamiento remplazando k por 0 o por -1 respectivamente.\nfinalmente todas estas transformaciones se pueden concatenar multiplicando sus matrices respectivas en el orden en el que se desean aplicar las transformaciones.\nTransformaciones Afines #  Todas las transformaciones vistas anteriormente se realizan con relación a un eje que pasa por el origen, sin emabrgo, esto no es siempre lo que se desea. Las transformaciones afines introducen la traslación, siendo definidas como una transformación lineal seguida por una traslación, es por esto que se considera a las transformaciones lineales como un subconjunto de las transformaciones afines. Cualquier transformación  \\( v\u0026#39; = vM \u0026#43; b \\)  es una transformación afin.\nPara poder realizar cualquier traslación ya una matriz de 3x3 no es suficiente, es por eso que se utiliza una notación de matrices extendidas de 4x4 equivalentes a las matrices ya vistas, pero con una conluma y fila añadidas, en un eje llamado comunmente w esto se ve reprecentado en la siguiente operación:\n \\[\\begin{bmatrix} x \u0026amp; y \u0026amp; z \u0026amp; 1 \\end{bmatrix} \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ \\Delta x \u0026amp; \\Delta y \u0026amp; \\Delta z \u0026amp; 1 \\end{bmatrix} = \\begin{bmatrix} x \u0026#43; \\Delta x \u0026amp; y \u0026#43; \\Delta y \u0026amp; z \u0026#43; \\Delta z \u0026amp; 1 \\end{bmatrix}\\]  Esto nos muestra exactamente como se aplica una traslación sobre la matriz de 4x4. En transformación afin, en donde se realiza una transformación linearl R y una traslación T\n \\[R = \\begin{bmatrix} r_11 \u0026amp; r_12 \u0026amp; r_13 \u0026amp; 0\\\\ r_21 \u0026amp; r_22 \u0026amp; r_23 \u0026amp; 0\\\\ r_31 \u0026amp; r_32 \u0026amp; r_33 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1\\\\ \\end{bmatrix} T = \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0\\\\ \\Delta x \u0026amp; \\Delta y \u0026amp; \\Delta z \u0026amp; 1 \\end{bmatrix} \\]  Es posible calcular un punto  \\( v\u0026#39;\\)  a partir del punto  \\( v\\)  de la siguiente forma:  \\[ v\u0026#39; = vRT \\]  Lo cual finalmente nos permite definir la matriz de una transformación afin como:  \\[ \\begin{bmatrix} r_11 \u0026amp; r_12 \u0026amp; r_13 \u0026amp; 0\\\\ r_21 \u0026amp; r_22 \u0026amp; r_23 \u0026amp; 0\\\\ r_31 \u0026amp; r_32 \u0026amp; r_33 \u0026amp; 0\\\\ \\Delta x \u0026amp; \\Delta y \u0026amp; \\Delta z \u0026amp; 1 \\end{bmatrix} \\]  Ya con esta herramienta es posible realizar la cualquier tipo de rotación, reflexión, proyección o escalamiento sobre un eje que no pase por el origen, permitiendo una infinidad de operaciones en el espacio incluidas las necesarías para visualizar y manipular desde distintos puntos una escena, ya sea desde un ojo o camara, en el mundo o en sus espacios intermedios.\n3. Métodos #  Con la intención de mostrar la manipulación de objetos en 3D se implementa el pincel 3D, aprovechando la libreria de inteligencia artificial ML5.js, la cual posee un modelo preentrenado que permite hacer el reconocimiento de manos con base en los fotogramas de un video, este modelo ubica 20 puntos de la mano en un sistema de coordenadas con relación al video, pero que tambien incluye un eje Z con una aproximación de la profundidad.Para el pincel se decidio que el usuario pinte con la punta del dedo indice. Este pincel 3D dispone de 5 botonoes, uno para intercambiar el pincel que se usa, el cual se puede ser un conejo, una calavera o una paleta. El segundo boton permirte cambiar el color con el que se pinta. El tercer boton permite habilitar o deshabilitar el pincel. Finalmente los ultimos dos botones permiten exportar e importar respectivamente un dibujo en un archivo JSON. Adicionalmetente y como ayuda para el usuario se muestra en la esquina inferior la imagen de la camara y en la pantalla se muestra en todo momento la posición del pincel. 3D brush markdown  new p5((p) =\u0026gt; {  let handpose;  let video;  let hands = [];  let points = [];  let brush;  let brushes=[];  let currentBrush = 2;  let saveIcon;  let currentColor = p.color(255,0,0);  let brushIcon;  let paint = true;   p.preload = function(){  brushes.push(p.loadModel(\u0026#39;/showcase/sketches/Popsicle.obj\u0026#39;,true)) ;  brushes.push(p.loadModel(\u0026#39;/showcase/sketches/craneo.OBJ\u0026#39;,true));  brushes.push(p.loadModel(\u0026#39;/showcase/sketches/bunny.obj\u0026#39;,true));  brush = p.loadModel(\u0026#39;/showcase/sketches/brush.stl\u0026#39;);  saveIcon = p.loadImage(\u0026#39;/showcase/sketches/save.svg\u0026#39;);  brushIcon = p.loadImage(\u0026#39;/showcase/sketches/brush.png\u0026#39;);  }   p.setup = function () {  console.log(\u0026#39;ml5 version:\u0026#39;, ml5.version);  p.createCanvas(640, 480,p.WEBGL);  video = p.createCapture(p.VIDEO);  video.size(p.width, p.height);  handpose = ml5.handpose(video, {flipHorizontal: true,},modelReady);  // This sets up an event that fills the global variable \u0026#34;predictions\u0026#34;  // with an array every time new hand poses are detected  handpose.on(\u0026#34;hand\u0026#34;, results =\u0026gt; {  hands = results;  });  // Hide the video element, and just show the canvas  video.hide();  buttons();  };   function buttons(){  let brushButton = p.createButton(\u0026#39;\u0026#39;);  brushButton.position(10-p.width , 35-p.height,\u0026#34;relative\u0026#34;);  brushButton.mousePressed(()=\u0026gt;{currentBrush=(currentBrush+1)%3;});  brushButton.class(\u0026#34;customButton\u0026#34;);  brushButton.size(50,50);   let colorButton = p.createColorPicker(\u0026#39;#ff0000\u0026#39;);  colorButton.position(10 , 45-p.height,\u0026#34;relative\u0026#34;);  colorButton.size(50,50);  colorButton.class(\u0026#34;customButton\u0026#34;);  colorButton.input(()=\u0026gt;{currentColor=colorButton.color()});   let paintButton = p.createButton(\u0026#39;\u0026#39;);  paintButton.position(-40 , 84-p.height,\u0026#34;relative\u0026#34;);  paintButton.size(50,50);  paintButton.class(\u0026#34;customButton\u0026#34;);  paintButton.mousePressed(()=\u0026gt;{paint= !paint;});   let saveButton = p.createButton(\u0026#39;\u0026#39;);  saveButton.position(-90 , 144-p.height,\u0026#34;relative\u0026#34;);  saveButton.size(50,50);  saveButton.class(\u0026#34;customButton\u0026#34;);  saveButton.mousePressed(()=\u0026gt;{p.saveJSON(points,\u0026#39;drawing\u0026#39;,true)});   let uploadButton = p.createFileInput(async(file)=\u0026gt;{  points = file.data  });  uploadButton.position(-140 , 194-p.height,\u0026#34;relative\u0026#34;);  uploadButton.size(50,50);  uploadButton.class(\u0026#34;customButton\u0026#34;);  }   function modelReady() {  console.log(\u0026#34;Model ready!\u0026#34;);  }   p.draw = function () {  p.background(0);  p.orbitControl();  p.stroke(50,70,30);  p.grid({dotted:false});  p.axes();  p.noStroke();  for (let i = 0; i \u0026lt; points.length; i += 1){  p.fill(p.color(points[i].color[0],points[i].color[1],points[i].color[2]));  p.push();  p.translate(points[i].position.x, points[i].position.y,points[i].position.z);  p.scale(0.05,-0.05,0.05);  p.ambientLight(60);  let locX = p.mouseX - p.width / 2;  let locY = p.mouseY - p.height / 2;  let light = p.treeLocation(p.createVector(-locX,locY,4),{ from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;WORLD\u0026#39;});  p.pointLight(255, 255, 255, light.x, light.y, light.z);  p.specularMaterial(p.color(points[i].color[0],points[i].color[1],points[i].color[2]));  p.shininess(50);  p.model(brushes[points[i].brush]);  p.pop();  }  drawKeypoints();   interfaz();  };   function interfaz(){   p.fill(currentColor);  p.push();  let trans = p.treeLocation(p.createVector(35,35,0.45),{ from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;WORLD\u0026#39;});  p.translate(trans.x,trans.y,trans.z);  pointLight = p.treeLocation(p.createVector(320,240,2),{ from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;WORLD\u0026#39;});  p.pointLight(255, 255, 255, pointLight.x, pointLight.y, pointLight.z);  p.scale(0.03,-0.03,0.03)  p.ambientLight(60);  p.specularMaterial(currentColor);  p.shininess(50);  p.model(brushes[currentBrush]);  p.pop();  p.beginHUD();  p.noFill()  p.stroke(currentColor);  p.strokeWeight(4);  p.rect(10,10,50,50);  if(paint){  p.image(brushIcon,10,130,50,50);  }  p.rect(10,130,50,50);   p.rect(10,190,50,50);  p.rect(10,250,50,50);  p.push();  p.translate(12,190);  p.fill(currentColor)  drawDownload();  p.pop();  p.push();  p.translate(11,250);  p.fill(currentColor)  drawUpload();  p.pop();   p.fill(currentColor);  p.rect(10,70,50,50);  p.translate(p.width,0,0);  p.scale(-1.0,1.0);  p.image(video, 0, 7*(p.height/8), p.width/8, p.height/8);  p.endHUD();  }   function drawKeypoints() {  for (let i = 0; i \u0026lt; hands.length; i += 1) {  const finger = hands[i].annotations.indexFinger[hands[i].annotations.indexFinger.length-1];  let vec = p.createVector(finger[0],finger[1],(finger[2]-60)/(-160-60));  let point =p.treeLocation(vec, { from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;WORLD\u0026#39;})  p.push();  p.translate(point.x, point.y,point.z);  p.scale(0.5,-0.5);  pointLight = p.treeLocation(p.createVector(320,240,2),{ from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;WORLD\u0026#39;});  p.pointLight(255, 255, 255, pointLight.x, pointLight.y, pointLight.z);  p.ambientLight(60);  p.specularMaterial(p.color(88, 50, 50));  p.shininess(50);  p.model(brush);  p.pop();  if(paint)points.push({position:point,color:currentColor.levels,brush:currentBrush})  }  hands = [];  }  function drawUpload(){  p.scale(2);  p.noStroke();  p.beginShape();  p.vertex(19,13);  p.vertex(19,18);  p.bezierVertex(19,18.55,18.55,19,18,19);  p.vertex(6,19);  p.bezierVertex(5.45,19,5,18.55,5,18);  p.vertex(5,13);  p.bezierVertex(5,12.45,4.55,12,4,12);  p.bezierVertex(3.45,12,3,12.45,3,13);  p.vertex(3,19);  p.bezierVertex(3,20.1,3.9,21,5,21);  p.vertex(19,21);  p.bezierVertex(20.1,21,21,20.1,21,19);  p.vertex(21,13);  p.bezierVertex(21,12.45,20.55,12,20,12);  p.bezierVertex(19.45,12,19,12.45,19,13);  p.endShape();  p.beginShape();  p.vertex(10.980663,7.0934721);  p.vertex(9.1006632,8.973472);  p.bezierVertex(8.710663199999999,9.363472,8.0806632,9.363472,7.6906631999999995,8.973472);  p.bezierVertex(7.3006632,8.583471999999999,7.3006632,7.953472199999999,7.6906631999999995,7.5634722);  p.vertex(11.280663,3.9734722);  p.bezierVertex(11.670663000000001,3.5834721999999997,12.300663,3.5834721999999997,12.690663,3.9734722);  p.vertex(16.280663,7.5634722);  p.bezierVertex(16.670663,7.953472199999999,16.670663,8.583472,16.280663,8.973472);  p.bezierVertex(15.890663,9.363472,15.260663000000001,9.363472,14.870663,8.973472);  p.vertex(12.980663,7.0934721);  p.vertex(12.980663,15.763472);  p.bezierVertex(12.980663,16.313472,12.530663,16.763472,11.980663,16.763472);  p.bezierVertex(11.430663,16.763472,10.980663,16.313472,10.980663,15.763472);  p.vertex(10.980663,7.0934721);  p.endShape();  }  function drawDownload(){  p.scale(2);  p.noStroke();  p.beginShape();  p.vertex(19,13);  p.vertex(19,18);  p.bezierVertex(19,18.55,18.55,19,18,19);  p.vertex(6,19);  p.bezierVertex(5.45,19,5,18.55,5,18);  p.vertex(5,13);  p.bezierVertex(5,12.45,4.55,12,4,12);  p.bezierVertex(3.45,12,3,12.45,3,13);  p.vertex(3,19);  p.bezierVertex(3,20.1,3.9,21,5,21);  p.vertex(19,21);  p.bezierVertex(20.1,21,21,20.1,21,19);  p.vertex(21,13);  p.bezierVertex(21,12.45,20.55,12,20,12);  p.bezierVertex(19.45,12,19,12.45,19,13);  p.endShape();  p.beginShape();  p.vertex(12.81862,13.824091);  p.vertex(14.698619999999998,11.944091);  p.bezierVertex(15.088619999999999,11.554091,15.718619999999998,11.554091,16.10862,11.944091);  p.bezierVertex(16.49862,12.334091,16.49862,12.964091,16.10862,13.354091);  p.vertex(12.518619999999999,16.944091);  p.bezierVertex(12.128619999999998,17.334091,11.498619999999999,17.334091,11.108619999999998,16.944091);  p.vertex(7.518620099999998,13.354091);  p.bezierVertex(7.128620099999998,12.964091,7.128620099999998,12.334091,7.518620099999998,11.944091);  p.bezierVertex(7.908620099999998,11.554091,8.538620099999997,11.554091,8.928620099999998,11.944091);  p.vertex(10.818619999999997,13.824091);  p.vertex(10.818619999999997,5.1540905);  p.bezierVertex(10.818619999999997,4.6040905,11.268619999999997,4.1540905,11.818619999999997,4.1540905);  p.bezierVertex(12.368619999999998,4.1540905,12.818619999999997,4.6040905,12.818619999999997,5.1540905);  p.vertex(12.81862,13.824091);  p.endShape();  } }, \u0026#34;hermann-ml\u0026#34;);         \n5. Discusión #  Es interesante todas las transformaciones que se dan detras de este pincel, se pueden ver cambios de espacios entre la pantalla y el mundo pero ademas se pueden ver las tranformaciones más simples en diferentes partes, un ejemplo es un reflejo de la camara para que el usuario pueda dibujar mejor, o las traslaciones usadas para el posicionamiento de los botones y demas objetos de la interfz, de la misma manera se ven efectos más complejos cuendo entramos a manipular la camara, causando rotaciones combinadas con traslaciones y escalamiento en diferentes ejes. Otra de las transformaciones interesantres es la que se realiza al posicionar la luz con respecto al mouse para cambiar la iluminación de lo dibujado y poder denotar bien la forma de los diferentes pinceles.\nUna extensión de este proyecto se podría dar mejorando el modelo de machine learning que se usa para la detección de la mano, esto con el objetivo de permitir el reconocimiento de dos manos o mejorar la precisión de la aproximación del eje Z la cual no es muy estable y es propensa a errores. tambien se podría permitir al usuario cargar sus propios pinceles y controlar la interfaz con solo gestos, sin embargo, esto ultimo estaría atado a mejorar el modelo incluyento la capasidad de detectar las 2 manos y diferenciarlas, o de un cambio en la forma de captar los movimientos y gestos.\n6. Conclusión #   A pesar de que la inteligencia artificial ya permite obtener mucha información a partir de imagenes es realmente complejo el realizar un mapero de profundidad a partir de esto, sin embargo a medida que avanza esta disiplina es posible que llege a proveer resultados lo suficientemente buenos para casos de usos como el de este pincel 3D A partir de las transformaciones afines es posible llegar a reprecentar matematicamente todo tipo de escenarios 3D y transformarlos de una forma ordenada, la cual permite abstraer toda la logica para poderse sentrar en la composición sin tener que preocuparse por todas las matematicas que soportan esto.  7. Referencias #   3D Math Primer for Graphics and Game Development Handpose  "},{"id":23,"href":"/showcase/docs/visual_computing/workshops/procedural_texturing/","title":"Procedural Texturing","section":"Workshops","content":"Procedural texturing #  En este taller se estudió la técnica denominada procedurtal texturing con la cual se busca generar programáticamente texturas en el shader para mapearlas a figuras\n1. Introducción #  Para este taller quisimos explorar las diferentes posibilidades que tenía el procedural texturing. Esta técnica para generar texturas en el shader es muy útil dado que es muy eficiente al aprovechar las capacidades de las GPU y permite una mayor flexibilidad al momento de generar escenarios en 3D. Pero al ser generadas por computador, se hace necesario el uso de funciones de ruido, estas funciones de ruido permiten generar la sensación de aleatoriedad, como la que se genera en la naturaleza de los materiales rugosos, permitiendo así la generación de texturas mucho más realistas. Adicionalmente, estas texturas necesitan de diseños que permitan percibir profundidad entre otros rasgos para no verse solo como una imagen pintada en el objeto, para lo cual ya se utilizan modelos de iluminación y de texture mapping combinados con las técnicas de procedural texturing.\n2. Revisión bibliográfica #  Para empezar con la generación de texturas se realizó una revisión bibliográfica en cuanto a generación de patrones en el shader, posteriormente se exploró la parte de aleatorización de las texturas y finalmente se intentó realizar una revisión de modelos de iluminación.\n2.1 Patrones #  Dado que los programas en los shaders siempre se realizan pixel por pixel, sin importar cuánto se repita una forma, el número de cálculos se mantiene constante, esto hace que los shaders sean el lugar ideal para generar patrones.\nPara la generación de patrones, se utiliza comúnmente una normalización del espacio, de forma que las coordenadas queden entre 1 y 0, las cuales se pueden dividir fácilmente para generar una cuadrícula, que sea un marco para la generación de los patrones. Las cuadrículas son especialmente útiles a la hora de generar patrones y se han utilizado desde la antigüedad, un ejemplo de esto son los mosaicos en los baños romanos.\nEn glsl para realizar este proceso se toman las coordenadas de textura y se dividen en la resolución de la pantalla, posteriormente se multiplican estas coordenadas por el tamaño de la cuadrícula que se requiera, de esta forma se pueden utilizar funciones como fract que retorna la parte no entera de un número o mod que saca el módulo de un número en otro número, para empezar a dividir la cuadrícula y generar las formas necesarias. Un ejemplo de esto es el siguiente shader:\n// Author @patriciogv - 2015  #ifdef GL_ES precision mediump float; #endif  uniform vec2 u_resolution; uniform float u_time;  float circle(in vec2 _st, in float _radius){  vec2 l = _st-vec2(0.5);  return 1.-smoothstep(_radius-(_radius*0.01),  _radius+(_radius*0.01),  dot(l,l)*4.0); }  void main() { \tvec2 st = gl_FragCoord.xy/u_resolution;  vec3 color = vec3(0.0);   st *= 3.0; // Scale up the space by 3  st = fract(st); // Wrap around 1.0   // Now we have 9 spaces that go from 0-1   color = vec3(st,0.0);  \tgl_FragColor = vec4(color,1.0); } que genera la siguiente textura:\nDentro de estas cuadrículas ya podemos empezar a generar nuestros patrones. Uno de estos son los patrones de Offset o de desplazamiento. Para poder generar estos patrones, que son como los de una pared de ladrillos, se hace necesario el identificar si una fila es par o impar para saber si el ladrillo se debe desplazar o no.\ny = step(1.0,mod(x,2.0)); Esta es la forma más eficiente de realizar lo anterior en el shader. Esta línea lo que hace es que aplica el módulo en base 2 para x, de esta forma toma dos cuadros de la cuadrícula generada, y con la función step, diferencia entre estas 2 cual es la par y cual es la impar generando un 0 para cualquier valor menor que 1 y un 1 para todo lo que sea mayor que 1. Se puede notar cómo esto podría realizarse con un condicional y un \u0026lt; pero, al ser step una función del lenguaje, funciona mucho más rápido que este condicional. Es por esto que cada vez que se pueda usar una función como esta, va a ser más óptimo usarla.\n2.2 Ruido #  Ya teniendo las bases para generar formas definidas, se hace necesario introducir la aleatoriedad para generar formas más realistas. El primer acercamiento que se hace frente a este tema, utiliza funciones sinusoidales, las multiplica por números muy grandes y extrae la parte fraccionaria de cada número, generando números pseudo-aleatorios. Es necesario notar que como generadoras de números pseudo-aleatorios, estas funciones reciben un número y a partir de este generan el número \u0026ldquo;aleatorio\u0026rdquo;, sin embargo, ante un mismo número siempre se va a generar la misma salida. Adicionalmente, esta forma de generar números, tiene un problema y es que los números tienden a concentrarse en el centro. Una función que podría utilizarse para generar ruido en 2D es la siguiente:\n fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123); Esta función utiliza el seno del producto punto del vector de coordenadas y un vector aleatorio, multiplicado por un valor igualmente aleatorio y finalmente toma la parte fraccionaria de este número. El resultado de esta función es un ruido como el que se generaba en los televisores antiguos cuando no había señal.\nAunque esta fórmula aporta aleatoriedad, esta no es ni parecida a la que encontramos normalmente en la naturaleza y los objetos reales, esto se da porque esté aleatorio no guarda ninguna correlación entre sus valores, pero en la naturaleza, la mayoría de los patrones guardan memoria del estado anterior.\nEl lograr un ruido más natural, fue el reto al que se enfrentó Ken Perlin en los 80s cuando se enfrentó al reto de generar texturas más realistas para su película Tron. Como resultado ideó dos algoritmos, uno de ellos ganador de un Oscar.\nEl primer algoritmo llamado “Value Noise”, utiliza una interpolación de la parte entera y la parte fraccionaria del número de entrada para realizar la generación, de esta forma se mantiene la correlación con la parte entera, pero también una parte aleatoria con la no entera. El algoritmo resultante es este:\n float i = floor(x); // integer  float f = fract(x); // fraction  y = mix(rand(i), rand(i + 1.0), smoothstep(0.,1.,f)); La función smoothstep nos permite que esta interpolación no sea lineal sino que como lo dice su nombre sea suavizada, ayudando a que la conexión de los valores se vea mucho más natural. Esto también se puede realizar utilizando una fórmula cúbica personalizada como prefieren algunos autores.\nNo obstante, esta función no fue lo suficientemente buena para Perlin, quien en 1985 ideó otra implementación de este algoritmo, la cual llamó \u0026ldquo;Gradient Noise\u0026rdquo;. En esta, Perlin averiguar cómo interpolar gradientes aleatorios en vez de valores. Estos gradientes son el resultado de una función aleatoria en 2D que retorna direcciónes en vez de valores simples. El resultado:\n vec2 i = floor(st);  vec2 f = fract(st);   vec2 u = f*f*(3.0-2.0*f);   return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),  dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),  mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),  dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y); Como podemos notar en este caso se utilizó una función cúbica personalizada en vez de smoothstep, para calcular u.\nPero para Perlin esto todavía no fue suficiente, el sabia que podía hacerlo mejor, por lo que en 2001 presentó el \u0026ldquo;simplex noise\u0026rdquo;. Este mejoraba el algoritmo anterior en los siguientes aspectos:\n Un algoritmo con menor complejidad computacional y menos multiplicaciones. Un ruido que escala a dimensiones más altas con menos coste computacional. Un ruido sin artefactos direccionales. Un ruido con gradientes bien definidos y continuos que puedan calcularse de forma bastante económica. Un algoritmo fácil de implementar en hardware.  Para la mejora, el vio que en dos dimensiones el estaba interpolando 4 puntos del cuadrado, así que él pudo notar que para 3 y 4 dimensiones se tenían que interpolar 6 y 16 puntos, de esta forma para N dimensiones 2^n. Por lo que decidió reemplazar la cuadrícula, por un una rejilla simplex de triángulos equiláteros La forma simplex para N dimesiones es una forma de N+1 esquinas, en otras palabras 1 esquina menos en 2 dimensiones, 4 en 3D y 11en 4D.\n¿Cómo se hace la rejilla simplex? la cuadrícula simplex puede obtenerse subdividiendo las celdas de una cuadrícula regular de 4 esquinas en dos triángulos isósceles y luego distprcionandola hasta que cada triángulo sea equilátero.\n#ifdef GL_ES precision mediump float; #endif  uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time;  // Some useful functions vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; } vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; } vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }  // // Description : GLSL 2D simplex noise function // Author : Ian McEwan, Ashima Arts // Maintainer : ijm // Lastmod : 20110822 (ijm) // License : // Copyright (C) 2011 Ashima Arts. All rights reserved. // Distributed under the MIT License. See LICENSE file. // https://github.com/ashima/webgl-noise // float snoise(vec2 v) {   // Precompute values for skewed triangular grid  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0  0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)  -0.577350269189626,  // -1.0 + 2.0 * C.x  0.024390243902439);  // 1.0 / 41.0   // First corner (x0)  vec2 i = floor(v + dot(v, C.yy));  vec2 x0 = v - i + dot(i, C.xx);   // Other two corners (x1, x2)  vec2 i1 = vec2(0.0);  i1 = (x0.x \u0026gt; x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);  vec2 x1 = x0.xy + C.xx - i1;  vec2 x2 = x0.xy + C.zz;   // Do some permutations to avoid  // truncation effects in permutation  i = mod289(i);  vec3 p = permute(  permute( i.y + vec3(0.0, i1.y, 1.0))  + i.x + vec3(0.0, i1.x, 1.0 ));   vec3 m = max(0.5 - vec3(  dot(x0,x0),  dot(x1,x1),  dot(x2,x2)  ), 0.0);   m = m*m ;  m = m*m ;   // Gradients:  // 41 pts uniformly over a line, mapped onto a diamond  // The ring size 17*17 = 289 is close to a multiple  // of 41 (41*7 = 287)   vec3 x = 2.0 * fract(p * C.www) - 1.0;  vec3 h = abs(x) - 0.5;  vec3 ox = floor(x + 0.5);  vec3 a0 = x - ox;   // Normalise gradients implicitly by scaling m  // Approximation of: m *= inversesqrt(a0*a0 + h*h);  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);   // Compute final noise value at P  vec3 g = vec3(0.0);  g.x = a0.x * x0.x + h.x * x0.y;  g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);  return 130.0 * dot(m, g); }  void main() {  vec2 st = gl_FragCoord.xy/u_resolution.xy;  st.x *= u_resolution.x/u_resolution.y;   vec3 color = vec3(0.0);   // Scale the space in order to see the function  st *= 10.;   color = vec3(snoise(st)*.5+.5);   gl_FragColor = vec4(color,1.0); } 3. Métodos #  Para llevar a cabo este ejercicio se llevó a cabo en primer lugar una revisión teórica de cada uno de los conceptos que envuelven la temática del proceso de procedural texturing. Para esto se jugo con la posiblidad de generar una textura de una pared de ladrillos desde el shader y darle algo de movimiento a este. Para realizar esto fue necesaria una investigación en cuanto a formas de generar imagenes de ruido para emular la rugocidad de los ladrillos, posteriormente, se implemetaron las diferentes opciones y se le añadio dinamismo al incluir como variable el tiempo, en forma del numero del frame actual, de esta forma se consigue que los ladrillos se empiecen a mover en la figura. Se tuvo la intención de añadir bump mapping para una comparación, pero el tiempo no nos permitio completarlo.\n4. Resultados #  A partir del estudio llevado a cabo se realizó el siguiente programa con el fin de visualizar el efecto del procedural texturing.\np5 - anti-aliasing code {{\u0026lt; p5-global-iframe id=\u0026#34;prod_text\u0026#34; width=\u0026#34;430\u0026#34; height=\u0026#34;430\u0026#34; lib1=\u0026#34;/showcase/scripts/p5.treegl.js\u0026#34;\u0026gt;}}  let pg;  let truchetShader;   function preload() {  // shader adapted from here: https://thebookofshaders.com/09/  // truchetShader = readShader(\u0026#39;brickwall.frag\u0026#39;, { matrices: Tree.mvMatrix, varyings: Tree.texcoords2|Tree.normal3|Tree.position3});  // console.log(parseVertexShader({ matrices: Tree.mvMatrix|Tree.pMatrix|Tree.pmvMatrix, varyings: Tree.texcoords2|Tree.normal3|Tree.position3}))  truchetShader = loadShader(\u0026#39;/showcase/scripts/brickwall.vert\u0026#39;, \u0026#39;/showcase/scripts/brickwall.frag\u0026#39;);  }   function setup() {  createCanvas(400, 400, WEBGL);  // create frame buffer object to render the procedural texture  pg = createGraphics(400, 400, WEBGL);  textureMode(NORMAL);  noStroke();  pg.noStroke();  // use truchetShader to render onto pg  pg.shader(truchetShader);  // emitResolution, see:  // https://github.com/VisualComputing/p5.treegl#macros  pg.emitResolution(truchetShader);  // pg clip-space quad (i.e., both x and y vertex coordinates ∈ [-1..1])  pg.quad(-1, -1, 1, -1, 1, 1, -1, 1);  // set pg as texture  texture(pg);  }   function draw() {  background(33);  truchetShader.setUniform(\u0026#39;u_time\u0026#39;, frameCount);  pg.quad(-1, -1, 1, -1, 1, 1, -1, 1);  orbitControl();  // cylinder(100, 200);  sphere(100)  // cone(100,100);   // ambientLight(60);  // let locX = mouseX - width / 2;  // let locY = mouseY - height / 2;  // let light = treeLocation(createVector(-locX,-locY,1.5),{ from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;WORLD\u0026#39;});  // pointLight(255, 255, 255, light.x, light.y, light.z);  // box(100);  }  function mouseMoved() {  // https://p5js.org/reference/#/p5.Shader/setUniform  // pg.emitMousePosition(truchetShader);  let locX = mouseX - width / 2;  let locY = mouseY - height / 2;  let light = treeLocation(createVector(-locX,-locY,1.5),{ from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;EYE\u0026#39;});  truchetShader.setUniform(\u0026#39;light_pos\u0026#39;,[light.x,light.y,light.z,1.] );  // pg clip-space quad (i.e., both x and y vertex coordinates ∈ [-1..1])  pg.quad(-1, -1, 1, -1, 1, 1, -1, 1);  }  {{\u0026lt; /p5-global-iframe \u0026gt;}}          let pg; let truchetShader; function preload() { // shader adapted from here: https://thebookofshaders.com/09/ // truchetShader = readShader(\u0026#39;brickwall.frag\u0026#39;, { matrices: Tree.mvMatrix, varyings: Tree.texcoords2|Tree.normal3|Tree.position3}); // console.log(parseVertexShader({ matrices: Tree.mvMatrix|Tree.pMatrix|Tree.pmvMatrix, varyings: Tree.texcoords2|Tree.normal3|Tree.position3})) truchetShader = loadShader(\u0026#39;/showcase/scripts/brickwall.vert\u0026#39;, \u0026#39;/showcase/scripts/brickwall.frag\u0026#39;); } function setup() { createCanvas(400, 400, WEBGL); // create frame buffer object to render the procedural texture pg = createGraphics(400, 400, WEBGL); textureMode(NORMAL); noStroke(); pg.noStroke(); // use truchetShader to render onto pg pg.shader(truchetShader); // emitResolution, see: // https://github.com/VisualComputing/p5.treegl#macros pg.emitResolution(truchetShader); // pg clip-space quad (i.e., both x and y vertex coordinates ∈ [-1..1]) pg.quad(-1, -1, 1, -1, 1, 1, -1, 1); // set pg as texture texture(pg); } function draw() { background(33); truchetShader.setUniform(\u0026#39;u_time\u0026#39;, frameCount); pg.quad(-1, -1, 1, -1, 1, 1, -1, 1); orbitControl(); // cylinder(100, 200); sphere(100) // cone(100,100); // ambientLight(60); // let locX = mouseX - width / 2; // let locY = mouseY - height / 2; // let light = treeLocation(createVector(-locX,-locY,1.5),{ from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;WORLD\u0026#39;}); // pointLight(255, 255, 255, light.x, light.y, light.z); // box(100); } function mouseMoved() { // https://p5js.org/reference/#/p5.Shader/setUniform // pg.emitMousePosition(truchetShader); let locX = mouseX - width / 2; let locY = mouseY - height / 2; let light = treeLocation(createVector(-locX,-locY,1.5),{ from: \u0026#39;SCREEN\u0026#39;, to: \u0026#39;EYE\u0026#39;}); truchetShader.setUniform(\u0026#39;light_pos\u0026#39;,[light.x,light.y,light.z,1.] ); // pg clip-space quad (i.e., both x and y vertex coordinates ∈ [-1..1]) pg.quad(-1, -1, 1, -1, 1, 1, -1, 1); }      \"  5. Discusión #  Partiendo de los resultados obtenidos tenemos que se puede evidenciar un suavizado en los bordes de cada triángulo generado dependiendo de qué fracción de los píxeles de los bordes estén por dentro y qué fracción estén por fuera. Por otra parte, y partiendo del hecho de que se realizó una subdivisión de cada píxel en 256 subpíxeles se evidencia que el proceso de rasterización que se lleva a cabo para determinar el promedio del color del píxel se hace de manera rápida debido a que el cálculo de las funciones de borde para cada subpíxel no significa una carga computacional grande.\n6. Conclusión #   El anti-aliasing es un proceso de mucha utilidad y aplicabilidad por ejemplo en el contexto de los videojuegos ya que provee de un algorítmo eficiente con el cual dar un efecto de suavizado de las figuras y de esta manera el usuario puede tener una visualización de los gráficos mucho más agradable.    7. Referencias #   Rasterization: a Practical Implementation The barycentric conspiracy Spatial anti-aliasing Aliasing \u0026amp; Anti-aliasing Raster in p5.quadrille.js  "}]