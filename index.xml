<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Visual Computing</title><link>https://visualcomputing.github.io/showcase/</link><description>Recent content in Introduction on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://visualcomputing.github.io/showcase/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://visualcomputing.github.io/showcase/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://visualcomputing.github.io/showcase/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://visualcomputing.github.io/showcase/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/logs/</guid><description>Registros actividades en clase # Martes 29 de Marzo: # Definición de la estructura de la página para la realización de los distintos ejercicios. Exploración de los distintos tipos de ilusiones encontradas en la página web de Michael Bach - Illutions Definición y desarrollo de una ilusión de tipo rejilla o grid. Jueves 31 de Marzo: # Exploración e investigación acerca de la convolución en el procesamiento de imágenes.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/profiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/profiles/</guid><description>Perfiles # Juan Esteban Rozo Urbina # Estudiante de Ingeniería de Sistemas y Computación - Universidad Nacional de Colombia Software Developer - Mercado Libre Colombia. Estudiante de ingeniería de software comprometido y orientado a objetivos, amante de la tecnología, entusiasta del desarrollo de software para mejorar la vida de las personas, buscador de oportunidades para aprender y crecer personal y profesionalmente, inspirado por el deseo de mejorar y ayudar a resolver problemas a través de la ciencia y la tecnología.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/buttons/</guid><description>Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/columns/</guid><description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/details/</guid><description>Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip;</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/expand/</guid><description>Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example # Default # {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content # Lorem markdownum insigne&amp;hellip; With Custom Label # {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/hints/</guid><description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/katex/</guid><description>KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example # {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}} \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Display Mode Example # Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Text continues here.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/mermaid/</guid><description>Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
Example # {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --&amp;gt; State2 note left of State2 : This is the note to the left.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/p5/div/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/p5/div/</guid><description>p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.
p5-div # {{&amp;lt; p5-div ver=&amp;#34;1.4.1&amp;#34; sketch=&amp;#34;/path/to/sketch.js&amp;#34; lib1=&amp;#34;https://cdntolib1/lib1.js&amp;#34; &amp;gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.
Scintillating grid # Look at this and also this among many more references there are.
p5-div markdown {{&amp;lt; p5-div sketch=&amp;#34;/showcase/sketches/scintillating.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/p5/iframe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/p5/iframe/</guid><description>p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe.
p5-iframe # {{&amp;lt; p5-iframe ver=&amp;#34;1.4.1&amp;#34; sketch=&amp;#34;/path/to/sketch.js&amp;#34; lib1=&amp;#34;https://cdntolib1/lib1.js&amp;#34; width=&amp;#34;800&amp;#34; height=&amp;#34;600&amp;#34; &amp;gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.
Color relativity # Look at this brief explanation about what color relativity is.
p5-iframe markdown {{&amp;lt; p5-iframe sketch=&amp;#34;/showcase/sketches/colors.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/template_examples/tabs/</guid><description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/workshops/anti_aliasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/workshops/anti_aliasing/</guid><description>Taller Rasterización # En este taller se estudió la técnica denominada anti-aliasing con la cual se busca disminuir la distorción en imágenes de alta resolución al ser presentadas en una resolución inferior.
Anti-aliasing (AA) # 1. Introducción # 2. Revisión bibliográfica # 3. Métodos # 4. Resultados # -- const ROWS = 100; const COLS = 100; const LENGTH = 5; let quadrille; let row0, col0, row1, col1, row2, col2; let min_row, min_col, max_row, max_col; let sub_quadrille; function setup() { createCanvas(COLS * LENGTH, ROWS * LENGTH); quadrille = createQuadrille(100, 100); // randomize(); // highlevel call: // quadrille.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/workshops/illutions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/workshops/illutions/</guid><description>Taller Ilusiónes # En este taller se exploraron dos lineas diferentes de ilusi[ones de computación visual, que aunque parecen diferentes inicialmente, ambas terminan siendo fundamentos que en conjunto dan forma al prosesamiento de imagenes en inteligencia artificial.
Grid illutions # 1. Introducción # Las ilusiones de cuadrículas hacen referencia a cualquier tipo de cuadrícula que engaña la visión de una persona. Las dos ilusiones más conocidas son:</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/workshops/main_spaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/workshops/main_spaces/</guid><description>Taller Main Spaces # 1. Introducción # En este taller se exploraron las posibilidades de las transformaciones espaciales para la producción de piezas en 3D, especialmente se hace uso de estas transformaciónes al proyectar los resultados de la pieza 3D en la pantalla, así como a partir de movimientos y gestos realizados sobre la pantalla modificar la pieza 3D al agregar objetos en su mundo, esto sin contar con las transformaciónes intermedias para lograr algunos efectos en la pantalla como la iluminación.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/visual_computing/workshops/software_rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/visual_computing/workshops/software_rendering/</guid><description>Renderizado de Software (Software rendering) # En este taller se estudió la técnica denominada anti-aliasing con la cual se busca disminuir la distorción en imágenes de alta resolución al ser presentadas en una resolución inferior.
Anti-aliasing (AA) # 1. Introducción # El masking juega un papel muy importante dentro del campo del procesamiento de imágenes ya que a través de una operación de convolución entre el kernel (matriz) y la imagen es posible aplicar efectos de desenfoque (blur), nitidez (sharpening), relieve (embossing), detección de bordes (edge detection), etc.</description></item></channel></rss>